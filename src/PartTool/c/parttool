// PartTool - replacement for GetPartns and ReadPart.
// Copyright (C) 1998-2024 Phil Norman and Marco Baye
//
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// This was derived from Phil Norman's "GetPartns" program, which reads the
// linux partition on a given disc and creates IscaFS pseudo image files for
// each ext2 partition found.
//
// 22/23 Apr 2004: version 0.02
//	Attempted to make it a tiny bit nicer - now it needs OSLib, though ;)
//	Renamed to PartTool.
//
// 20 May 2024: version 3
//	added "hex" command and support for PC/MBR partition table

#define VERSION_STRING	"3"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "oslib/os.h"
#include "oslib/osfile.h"
#include "oslib/osfind.h"
#include "oslib/osgbpb.h"
#include "oslib/osmodule.h"
#include "oslib/filecore.h"


// largest sector size this program supports:
#define MAX_SECTOR_SIZE		4096

// FileCore's "non-ADFS partition descriptor" types:
//#define NONFILECORE_RISCIX			1	// RISC iX partition
#define NONFILECORE_ARMLINUXPARTITIONTABLE	9	// partition table for ARMLinux
// entries in ARMLinux partition table (located after FileCore part):
struct linux_part {
	int	magic;	// what the partition contains (see below)
	int	rel_start_sector;	// CAUTION, relative to sector of partition table!
	int	sector_count;
};
// partition types:
#define MAGIC_NATIVE	0xdeafa1de	// likely ext2/3/4
#define MAGIC_SWAP	0xdeafab1e

// CHS values are only used for PC/MBR data:
struct chs {
	unsigned short	cylinder;
	byte		head;
	byte		sector;
};
// how this program passes partition data around:
struct partition {
	unsigned int	start_sector;	// absolute
	unsigned int	sector_count;
	const char	*type_string;	// "Native", "Swap", "Other", "Unknown" etc.
	bool		is_linux_native;	// likely ext2/3/4
	bool		has_pcmbr_fields;	// fields below hold data
	struct {
		struct chs	first_chs;
		struct chs	last_chs;
		byte		flags;
		byte		type;
	} pcmbr;
};

// chunk size when dumping a partition to a file:
#define SECTORS_PER_CHUNK	1024	// 512K if 512 byte per sector

// types for generated files:
#define FILETYPE_ISCAFS	0x0b0	// "ext2fs" (not registered)
#define FILETYPE_OTHER	0xffd	// "Data"

// command strings:
#define OPTION_63_16		"--63-16"
#define OPTION_BIG		"--big"
#define OPTION_MBR		"--mbr"
#define COMMAND_HEX		"hex"
#define COMMAND_LIST		"list"	// "display" is also supported and does the same
#define COMMAND_MAKEPSEUDO	"makepseudo"
#define COMMAND_DUMPTOFILE	"dumptofile"

// globals
struct {
	char		*prog_name;
	void		*private_word;
	bool		found_mbr;		// found PC-style MBR partition table
	bool		found_armlinux;		// found FileCore/ARMLinux partition table
	int		partition_sector;	// sector holding ARMLinux partition table
} globals	= { 0 };

// stuff given via command line arguments
struct {
	bool		force_63_16;
	bool		force_big;
	bool		use_mbr;
	const char	*filing_system_name;
	int		drive_number;
	int		desired_partition;
} args	= { 0 };

// sector buffer for mbr and boot block
byte	first4K[MAX_SECTOR_SIZE];

filecore_disc	discrecord;

//
static void show_help(void)
{
	fprintf(stderr,
"\n"
"This is PartTool, version " VERSION_STRING ".\n"
"Source code is available at https://github.com/marcobaye/IscaFS\n"
"\n"
"Usage:\n"
"%s [OPTIONS] "COMMAND_LIST" FILING_SYSTEM DRIVE\n"
"        ...list partitions\n"
"%s [OPTIONS] "COMMAND_MAKEPSEUDO" FILING_SYSTEM DRIVE PARTITION_ID OUTPUT_FILENAME\n"
"        ...create a pseudo image file for IscaFS\n"
"%s [OPTIONS] "COMMAND_DUMPTOFILE" FILING_SYSTEM DRIVE PARTITION_ID OUTPUT_FILENAME\n"
"        ...dump whole partition to file (only if partition size < 4GB)\n"
"%s [OPTIONS] "COMMAND_HEX" FILING_SYSTEM DRIVE SECTOR_NUMBER\n"
"        ...show hex dump of sector contents\n"
		, globals.prog_name, globals.prog_name, globals.prog_name, globals.prog_name);
	printf(
"\n"
"Options:\n"
"  -h, --help    show this help\n"
"      " OPTION_63_16 "   force 63 sectors per track and 16 heads\n"
"      " OPTION_BIG "     force \"big disc\" flag to 1\n"
"      " OPTION_MBR "     use PC-style MBR instead of FileCore/ARMLinux partition table\n"
"\n"
	);
}

// error handler
static void exit_error(const char msg[])
{
	fprintf(stderr, "\nError: %s\n", msg);
	exit(EXIT_FAILURE);
}
// bug handler
static void BUG(const char msg[])
{
	fprintf(stderr, "\nBUG %s, please report it, this really should not happen!\n", msg);
	exit(EXIT_FAILURE);
}


// catch os errors and send to program's error handler
static void oslibwrapper(os_error *err)
{
	if (err)
		exit_error(err->errmess);
}


// read sectors using the old (29-bit) interface
static void readsectors_via_29bit_filecore(int start_sector, byte *buf, int bufsize)
{
	filecorediscop_read_sectors(
		((int) &discrecord) << 6,
		(start_sector << discrecord.log2secsize) | (args.drive_number << 29),
		buf, bufsize, &globals.private_word, NULL, NULL);
	// TODO: check return value (number of bytes unread)
}


// read sectors using the newer (38-bit) interface
static void readsectors_via_38bit_filecore(int start_sector, byte *buf, int bufsize)
{
	filecoresectorop_read_sectors(
		((int) &discrecord) << 6,
		start_sector | (args.drive_number << 29),
		buf, bufsize, &globals.private_word, NULL, NULL);
	// TODO: check return value (number of bytes unread)
}

/*
// read sectors using the newest (64-bit) interface
static void readsectors_via_64bit_filecore(int start_sector, byte *buf, int bufsize)
{
	filecore_disc_address64	da64;

	da64.drive = args.drive_number;
	da64.offset_low = start_sector << discrecord.log2secsize;
	da64.offset_high = ((unsigned long long) start_sector) >> (32 - discrecord.log2secsize);

	// FIXME - SWI wants ptr to disc record in r5, so how do I pass it to OSLib?
	filecorediscop64_read_sectors(
		((int) &discrecord) << 6,
		&da64,
		buf, bufsize, &globals.private_word, NULL, NULL);
	// TODO: check return value (number of bytes unread)
}
*/

// function pointer for reading sectors
// initially, the old (29-bit) FileCore_DiscOp interface is used. It is then
// changed to use the newer (38-bit) FileCore_SectorOp or the newest (64-bit)
// FileCore_DiscOp64, if available.
static void	(*read_sectors)(int start_sector, byte *buf, int bufsize)	= readsectors_via_29bit_filecore;


// set drive size so FileCore won't refuse to access beyond FileCore partition
static void set_sector_limit(unsigned int sector_limit)
{
	discrecord.disc_size = sector_limit << discrecord.log2secsize;
	discrecord.disc_size_hi = sector_limit >> (32 - discrecord.log2secsize);
	if (read_sectors != readsectors_via_29bit_filecore)
		return;

	// check for old FileCore limit
	if ((discrecord.disc_size_hi) || (discrecord.disc_size >> 29))
		exit_error("Sorry, your version of FileCore cannot read this far into the disc.");
}


// helper function to output human-readable disc size
const char *units[]	= {
		//  leading	bits	bits
		//  zeroes	shown	ignored
	"Byte",	//	52	12
	"KiB",	//	42	12	10
	"MiB",	//	32	12	20
	"GiB",	//	22	12	30
	"TiB",	//	12	12	40
	"PiB",	//	 2	12	50
	"EiB"	//		 4	60
};
static void print_size(unsigned long long number)
{
	int	unit	= 0;

	while (number > 4095) {
		number >>= 10;
		++unit;
	}
	printf("%d %s", (int) number, units[unit]);
}


// common start
static void get_module_and_discrecord(void)
{
	char	module_title[256];	// buffer for "FileCore%FILINGSYSTEM"
	char	disc_spec[16];		// holds ":DRIVENUMBER" string

	// build module title
	sprintf(module_title, "FileCore%%%s", args.filing_system_name);

	// get module's private word
	if (xosmodule_lookup(module_title, NULL, NULL, NULL, &globals.private_word, NULL))
		exit_error("Given filing system does not exist or is not a FileCore filing system.");

	// check whether 38-bit or 64-bit FileCore is available
	// if yes, use it
	if (!xos_swi_number_from_string("FileCore_SectorOp", NULL))
		read_sectors = readsectors_via_38bit_filecore;
/* commented out as long as I don't know whether ptr to alternative disc record is passed correctly:
	if (!xos_swi_number_from_string("FileCore_DiscOp64", NULL))
		read_sectors = readsectors_via_64bit_filecore;
*/
	// get disc record
	sprintf(disc_spec, ":%d", args.drive_number);
	oslibwrapper(xfilecore_describe_disc(disc_spec, &discrecord, &globals.private_word));
	// display some items of interest:
	printf("DEBUG: Disc record says:\n");
	printf("DEBUG:   Sector size:       %d (log2=%d)\n", 1u << discrecord.log2secsize, discrecord.log2secsize);
	printf("DEBUG:   Sectors per track: %d\n", discrecord.secspertrack);
	printf("DEBUG:   Heads:             %d\n", discrecord.heads);
	printf("DEBUG:   Disc type:         0x%03x\n", discrecord.disctype);
	printf("DEBUG:   Disc size:         0x%08x %08x (", discrecord.disc_size_hi, discrecord.disc_size);
	print_size((((unsigned long long) discrecord.disc_size_hi) << 32) | discrecord.disc_size);
	printf(")\n");
	printf("DEBUG:   Big_disc flag:     0x%02x\n", discrecord.big_flag);
	printf("DEBUG:   Final padding:     0x%08x\n", ((unsigned int *) &discrecord)[15]);
	// if user asked for it, fake some values
	if (args.force_63_16) {
		discrecord.secspertrack = 63;
		discrecord.heads = 16;
		printf("DEBUG: Faked 63 sectors per track and 16 heads.\n");
	}
	if (args.force_big) {
		discrecord.big_flag = 1;	// ...should not make a difference, but test anyway!
		printf("DEBUG: Faked \"Big_disc\" flag to 0x01.\n");
	}
	// CAUTION: this "file type" field is not on disc, FileCore fills it in
	// when returning the disc record!
	if (discrecord.disctype == 0xfcd)
		printf("\nDisc starts with a FileCore hard disc file system.\n");
	else
		printf("\nDisc does not start with a FileCore hard disc file system.\n");
}

// read first sector and try to determine partitioning scheme
static void read_boot_block(void)
{
	// Read boot block. Actually the FileCore boot block is located at byte
	// offset &0c00, but we're using sector addressing, so we're reading
	// 4096 bytes starting from sector 0 to make sure this works with all
	// sector sizes.
	// This also gives us the PC-style MBR located at byte offset &0000.
	read_sectors(0, first4K, MAX_SECTOR_SIZE);

	// check for FileCore/ARMLinux partition table:
	if (discrecord.disctype == 0xfcd) {
		if (first4K[0xdfc] == NONFILECORE_ARMLINUXPARTITIONTABLE) {
			globals.found_armlinux = TRUE;
			globals.partition_sector = discrecord.secspertrack * discrecord.heads * ((first4K[0xdfd]) + ((first4K[0xdfe]) << 8));
			printf("Disc has a FileCore/ARMLinux partition table.\n");
		} else {
			printf("Disc does not have a FileCore/ARMLinux partition table.\n");
		}
	} else {
		// no need to output anything here,
		// "Disc does not start with FileCore" has already been printed.
	}

	// check for PC-style MBR partition table:
	if ((first4K[0x1fe] == 0x55) && (first4K[0x1ff] == 0xaa)) {
		globals.found_mbr = TRUE;
		printf("Disc has a PC-style MBR partition table.\n");
	} else {
		printf("Disc does not have a PC-style MBR partition table.\n");
	}
}


// loop over all armlinux partitions
// call given callback function for each, unless NULL
// return whether wanted partition data has been copied to struct, unless NULL
#define ARMLINUX_PARTTABLE_SIZE	1024	// !PartMan assigns two 512-byte sectors
static bool iter_armlinux_table(void (*callback)(int id, struct partition *part), struct partition *wanted_part)
{
	byte			buffer[ARMLINUX_PARTTABLE_SIZE];
	struct linux_part	*part;
	int			partition_id;
	struct partition	current;
	bool			found		= FALSE;

	if (!globals.found_armlinux)
		BUG("in partition table handling");

	// set disc size so FileCore won't refuse to access partition table
	set_sector_limit(globals.partition_sector + 2);	// !PartMan assigns two 512-byte sectors
	// read partition table to local buffer
	read_sectors(globals.partition_sector, buffer, ARMLINUX_PARTTABLE_SIZE);
	// init run pointer
	part = (struct linux_part *) buffer;
	partition_id = 3;	// 1 = FileCore, 2 = Linux partition table
	while ((part->magic == MAGIC_NATIVE) || (part->magic == MAGIC_SWAP)) {
		// convert entry to our own format
		current.start_sector = globals.partition_sector + part->rel_start_sector;	// convert relative to absolute number
		current.sector_count = part->sector_count;
		// fill in additional fields
		current.has_pcmbr_fields = FALSE;
		current.type_string = (part->magic == MAGIC_NATIVE) ? "Native" : "Swap";
		current.is_linux_native = (part->magic == MAGIC_NATIVE);
		// pass to callback
		if (callback)
			callback(partition_id, &current);
		// remember for caller
		if (wanted_part && (partition_id == args.desired_partition)) {
			*wanted_part = current;
			found = TRUE;
		}
		++partition_id;
		++part;
	}
	return found;
}

// helper fn to read CHS values
static void read_chs(struct chs *chs, byte bytes[3])
{
	chs->head = bytes[0];
	chs->sector = bytes[1] & 0x3f;
	chs->cylinder = ((bytes[1] & 0xc0) << 2) | bytes[2];
}
// helper fn to read unaligned 32-bit word
static unsigned int read_unaligned_le32(byte bytes[4])
{
	return (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | bytes[0];
}

// loop over the four primary PC/MBR partitions
// call given callback function for each, unless NULL
// return whether wanted partition data has been copied to struct, unless NULL
static bool iter_pcmbr_table(void (*callback)(int id, struct partition *part), struct partition *wanted_part)
{
	byte			*entry;
	int			id;
	bool			found	= FALSE;
	struct partition	current;

	entry = first4K + 0x1be;	// partition entries are at 0x1be/0x1ce/0x1de/0x1ee
	for (id = 1; id < 5; ++id) {
		// convert entry to our own format
		current.pcmbr.flags = entry[0];
		read_chs(&current.pcmbr.first_chs, entry + 1);
		current.pcmbr.type = entry[4];
		read_chs(&current.pcmbr.last_chs, entry + 5);
		current.start_sector = read_unaligned_le32(entry + 8);
		current.sector_count = read_unaligned_le32(entry + 12);
		// fill in additional fields
		current.has_pcmbr_fields = TRUE;
		current.is_linux_native = FALSE;	// changed to TRUE if 0x83
		switch (entry[4]) {
		case 0x00:
			current.type_string = "Free";
			break;
		case 0x05:
			current.type_string = "Extended partition, CHS";
			break;
		case 0x0f:
			current.type_string = "Extended partition, LBA";
			break;
		case 0x82:
			current.type_string = "Swap";
			break;
		case 0x83:
			current.type_string = "Native";
			current.is_linux_native = TRUE;
			break;
		default:
			current.type_string = "see Wikipedia";
		}
		// pass to callback
		if (callback)
			callback(id, &current);
		// remember for caller
		if (wanted_part && (id == args.desired_partition)) {
			*wanted_part = current;
			found = TRUE;
		}
		entry += 16;
	}
	return found;
}

// loop over partitions
// call given callback function for each, unless NULL
// return whether wanted partition data has been copied to struct, unless NULL
static bool iter_partition_table(void (*callback)(int id, struct partition *part), struct partition *wanted_part)
{
	bool	result;

	if (args.use_mbr) {
		if (globals.found_mbr) {
			result = iter_pcmbr_table(callback, wanted_part);
		} else {
			exit_error("No PC/MBR partition table available.");
		}
	} else {
		if (globals.found_armlinux) {
			result = iter_armlinux_table(callback, wanted_part);
		} else {
			if (globals.found_mbr) {
				exit_error("Use the --mbr switch to access the PC/MBR table.");
			} else {
				exit_error("No partition tables found.");
			}
		}
	}
	return result;
}


// display partition info
static void displayinfo(int id, struct partition *part)
{
	static bool	show_header	= TRUE;

	if (show_header) {
		printf("  ID  Start sector  Sectors\n");
		show_header = FALSE;
	}
	if (part->has_pcmbr_fields) {
		switch (part->pcmbr.flags) {
		case 0x00:
			putchar(' ');
			break;
		case 0x80:
			putchar('*');
			break;
		default:
			putchar('?');
		}
	} else {
		putchar(' ');
	}
	printf("%3d   %10d  %10d", id, part->start_sector, part->sector_count);
	if (part->has_pcmbr_fields)
		printf(" (%04d/%03d/%02d - %04d/%03d/%02d) %02x", part->pcmbr.first_chs.cylinder, part->pcmbr.first_chs.head, part->pcmbr.first_chs.sector, part->pcmbr.last_chs.cylinder, part->pcmbr.last_chs.head, part->pcmbr.last_chs.sector, part->pcmbr.type);
	printf(", %s\n", part->type_string);
}


// taken from smorbrod lib {
#define BYTES_PER_LINE	16
// dump memory to stream in hex editor format ("00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff : ................\n")
void hexdump(FILE *stream, const byte *buf, size_t len)
{
	char	hex_part[BYTES_PER_LINE * 3 + 1];	// "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff \0"
	char	ascii_part[BYTES_PER_LINE + 1];		// "................\0"
	int	bytes_now,
		ii;
	byte	b;
	int	offset	= 0;

	while (len) {
		bytes_now = len < BYTES_PER_LINE ? len : BYTES_PER_LINE;
		printf("%04x: ", offset);
		offset += bytes_now;
		for (ii = 0; ii < bytes_now; ii++) {
			b = *buf++;
			sprintf(hex_part + 3 * ii, "%02x ", b);
			ascii_part[ii] = ((b > 31) && (b < 127)) ? b : '.';
		}
		for (/*nothing!*/; ii < BYTES_PER_LINE; ii++) {
			sprintf(hex_part + 3 * ii, "   ");
			ascii_part[ii] = '\0';
		}
		ascii_part[BYTES_PER_LINE] = '\0';
		fprintf(stream, "%s : %s\n", hex_part, ascii_part);
		len -= bytes_now;
	}
}
// }

//
static void main_hexdump_sector(unsigned int sector_number)
{
	static byte	buffer[MAX_SECTOR_SIZE];
	// CAUTION!
	// when the "static" keyword is removed, the program crashes on startup!
	// using "512" instead of "MAX_SECTOR_SIZE" works without problems.
	// why would the runtime have a problem with creating a 4K stack frame?
	// maybe a problem with gcc?
	// making the buffer static seemed to be the easiest solution right now.

	get_module_and_discrecord();
	read_sectors(sector_number, buffer, 1u << discrecord.log2secsize);
	printf("\nSector %d (0x%x):\n", sector_number, sector_number);
	hexdump(stdout, buffer, 1u << discrecord.log2secsize);
}


//
static void main_list_partitions(void)
{
	get_module_and_discrecord();
	read_boot_block();
	if (globals.found_armlinux) {
		printf("\nFileCore/ARMLinux partition table:\n");
		iter_armlinux_table(displayinfo, NULL);
	}
	if (globals.found_mbr) {
		printf("\nPC/MBR partition table:\n");
		iter_pcmbr_table(displayinfo, NULL);
	}
	if (globals.found_armlinux && globals.found_mbr) {
		printf(
"\nIf you want to access PC/MBR partitions, use the \"--mbr\" cli switch,\n"
"otherwise the FileCore/ARMLinux table will be used.\n");
	}
	if (!globals.found_armlinux && !globals.found_mbr) {
		printf("\nNo partition tables found.\n");
	}
}


static void done(const char *filedescription)
{
	printf(
"Done.\n"
"If you have IscaFS, double-clicking the %s should open it.\n"
"That is, if the partition contains a valid ext2/ext3 filesystem.\n"
	, filedescription);
}


// file format of pseudo image files
struct pseudo_image_file {
	bits	Phil;		// magic word to recognize file format
	bits	ext2;		// magic word to recognize contents
	int	first_sector;	// first sector of partition
	int	last_sector;	// last sector of partition
	int	log2secsize;	// log2 of sector size
	int	drive;		// drive number
	char	fs[256];	// filing system, nullterminated
};
// generate a pseudo image file
static void main_make_pseudo(const char image_file_name[])
{
	struct partition		part;
	struct pseudo_image_file	pif;
	int				string_length;

	get_module_and_discrecord();
	read_boot_block();

	// build pseudo image file in memory
	string_length = strlen(args.filing_system_name) + 1;
	if (string_length > 256)
		exit_error("Length of filing system name looks a bit excessive.");

	if (iter_partition_table(NULL, &part) == FALSE)
		return;	// number not found

	if (!part.is_linux_native) {
		fprintf(stderr, "Warning: Partition %d might not be an ext2/3/4 partition!\n", args.desired_partition);
		// do not exit, user might know what they are doing!
	}

	displayinfo(args.desired_partition, &part);

	// fill in the struct
	pif.Phil = 0x4cee68fe;	// "þhîL"       (comment string is UTF-8!)
	pif.ext2 = 0x32747865;	// "ext2"
	pif.first_sector = part.start_sector;
	pif.last_sector = pif.first_sector + part.sector_count - 1;
	pif.log2secsize = discrecord.log2secsize;
	pif.drive = args.drive_number;
	strcpy(pif.fs, args.filing_system_name);

	oslibwrapper(xosfile_save_stamped(
		image_file_name,
		FILETYPE_ISCAFS,
		(byte *) &pif,
		((byte *) &pif) + 24 + string_length));	// 24 is length of header before string...

	done("pseudo image file");
}


// dump partition to file
static void main_dump_to_file(const char dump_file_name[])
{
	struct partition	part;
	unsigned int		startsector,
				bytes_per_chunk,
				bytes_to_transfer;
	os_fw			file_handle;
	os_error		*err		= NULL;
	byte			*chunk;
	int			unwritten	= 0;

	get_module_and_discrecord();
	read_boot_block();

	if (iter_partition_table(NULL, &part) == FALSE)
		return;	// not found

	displayinfo(args.desired_partition, &part);

	// check hypothetical size of output file
	if (part.sector_count >= (0xffffffffu >> discrecord.log2secsize))
		exit_error("Dump file would exceed the 4 GiB file size limit imposed by RISC OS.");

	// calculate transfer values
	startsector = part.start_sector;
	bytes_per_chunk = SECTORS_PER_CHUNK << discrecord.log2secsize;
	bytes_to_transfer = part.sector_count << discrecord.log2secsize;

	// set new disc size so FileCore won't refuse to access partition
	set_sector_limit(startsector + part.sector_count);

	// calculate transfer values: buffer size, transfer count
	chunk = (byte *) malloc(bytes_per_chunk);
	if (chunk == NULL)
		exit_error("Out of memory when allocating transfer buffer.");

	// try to create file with needed size
	oslibwrapper(xosfile_create_stamped(
		dump_file_name,
		part.is_linux_native ? FILETYPE_ISCAFS : FILETYPE_OTHER,
		bytes_to_transfer));

	// open file
	oslibwrapper(xosfind_openupw(
		osfind_NO_PATH | osfind_ERROR_IF_ABSENT | osfind_ERROR_IF_DIR,
		dump_file_name,
		NULL,
		&file_handle));

	puts("Transfer in progress");

	// transfer loop
	while (bytes_to_transfer > bytes_per_chunk) {
		read_sectors(startsector, chunk, bytes_per_chunk);
		err = xosgbpb_writew(file_handle, chunk, bytes_per_chunk, &unwritten);
		if (err || unwritten)
			break;

		startsector += SECTORS_PER_CHUNK;
		bytes_to_transfer -= bytes_per_chunk;
		putchar('.');
	}
	if ((err == NULL) && (unwritten == 0)) {
		read_sectors(startsector, chunk, bytes_to_transfer);
		err = xosgbpb_writew(file_handle, chunk, bytes_to_transfer, &unwritten);
		putchar('.');
	}

	// close file
	xosfind_closew(file_handle);	// ignore errors

	if (err)
		oslibwrapper(err);
	if (unwritten)
		exit_error("Could not write all bytes.");

	//
	if (part.is_linux_native)
		done("image file");
	else
		printf("Done.\n");
}


// command line argument handling:
int	cliargs_left;	// number of arguments left
char	**cliargs_next;	// pointer to remaining arguments

// return next unhandled argument
static char *cliargs_get_next(void)
{
	if (cliargs_left == 0)
		BUG("in cli arg handling");
	--cliargs_left;
	return *(cliargs_next++);
}

// helper fn to quickly check number of cli arguments
static void cliargs_check_count(int wanted)
{
	if (cliargs_left != wanted)
		exit_error("Wrong number of arguments.");
}

// taken from ACME {
// convert string to unsigned integer
// copes with hexadecimal if prefixed with "&", "0x" or "0X".
// assumes decimal otherwise.
static unsigned int parse_unsigned_int(const char string[], const char error_msg[])
{
	unsigned int	result;
	char		*end;
	int		base	= 10;

	if (*string == '&') {
		base = 16;
		++string;
	} else if ((*string == '0') && ((string[1] == 'x') || (string[1] == 'X'))) {
		base = 16;
		string += 2;
	}
	result = strtol(string, &end, base);
	// complain about trailing garbage
	if (*end)
		exit_error(error_msg);
	return result;
}
// }

// read filing system name and drive number
static void get_fs_and_drive(void)
{
	args.filing_system_name = cliargs_get_next();
	args.drive_number = parse_unsigned_int(cliargs_get_next(), "Could not parse drive number.");
}
// read partition number
static void get_partition_number(void)
{
	args.desired_partition = parse_unsigned_int(cliargs_get_next(), "Could not parse partition number.");
}

//
int main(int argc, char *argv[])
{
	const char	*arg;

	cliargs_left = argc;
	cliargs_next = argv;

	// first set program name because help output needs it
	globals.prog_name = cliargs_get_next();

	// if no args given, show help and exit
	if (cliargs_left == 0) {
		show_help();
		exit(EXIT_SUCCESS);
	}

	// handle cli args
	while (cliargs_left) {
		arg = cliargs_get_next();
		if (strcmp(arg, "-h") == 0) {
			show_help();
		} else if (strcmp(arg, "--help") == 0) {
			show_help();
		} else if (strcmp(arg, OPTION_63_16) == 0) {
			args.force_63_16 = TRUE;
		} else if (strcmp(arg, OPTION_BIG) == 0) {
			args.force_big = TRUE;
		} else if (strcmp(arg, OPTION_MBR) == 0) {
			args.use_mbr = TRUE;
		} else if ((strcmp(arg, COMMAND_LIST) == 0) || ((strcmp(arg, "display") == 0))) {
			// ("list" used to be called "display")
			cliargs_check_count(2);
			get_fs_and_drive();
			main_list_partitions();
		} else if (strcmp(arg, COMMAND_MAKEPSEUDO) == 0) {
			cliargs_check_count(4);
			get_fs_and_drive();
			get_partition_number();
			main_make_pseudo(cliargs_get_next());
		} else if (strcmp(arg, COMMAND_DUMPTOFILE) == 0) {
			cliargs_check_count(4);
			get_fs_and_drive();
			get_partition_number();
			main_dump_to_file(cliargs_get_next());
		} else if (strcmp(arg, COMMAND_HEX) == 0) {
			cliargs_check_count(3);
			get_fs_and_drive();
			main_hexdump_sector(parse_unsigned_int(cliargs_get_next(), "Could not parse sector number."));
		} else {
			exit_error("Unknown option or command string.");
		}
	}
	return EXIT_SUCCESS;
}
