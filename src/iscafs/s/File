#multipass on
; File
; ~~~~
; Whole file manipulation functions.
; 23 Mar 2004 - 32bitclean


; rewritten, now needs and returns length info
; rewritten again, now copes with ".ext" extensions as well
.File_FiletypeFromLeafname
FNdt(">>> File_FiletypeFromLeafname")
;------------------------
; Work out the filetype of a file from its leafname
;------------------------
; On entry:
;	r0  =>	unterminated ext2 leafname
;	r1  =	length of leafname
; On exit:
;	r0  =	filetype
;	r1  =	corrected length (may be shortened if ",xxx" extension)
;------------------------
	FNfunction("r2-r4")
	; scan backwards until "." or "," found (or no more characters)
	SUB	r2,r0,#1	; now r2 points *before* leafname
	MOVS	r3,r1		; r3 counts backwards
	BEQ	_use_default	; just to make sure, hopefully never taken
._scanloop
		SUBS	r3,r3,#1
		LDRNEB	r14,[r2,r3]
		TEQNE	r14,#ASC"."
		TEQNE	r14,#ASC","
		BNE	_scanloop
	TEQ	r3,#0
	BEQ	_use_default
	TEQ	r14,#ASC","
	MOV	r4,r1		; save filename length in r4
	ADD	r0,r0,r3	; r0 => after dot/comma
	SUB	r2,r1,r3	; r2 = length of stuff after dot/comma
	BEQ	_found_comma
; handle ".ext" extension
	; r0 => after dot
	; r2 = length of stuff after dot
	CMP	r2,#len_filetypebuf
	BGT	_use_default
	; copy extension to conversion buffer
	ADD	r1,r12,#filetypebuffer	; pointer to buffer
._copyloop
		LDRB	r14,[r0],#1
		STRB	r14,[r1],#1
		SUBS	r2,r2,#1
		BNE	_copyloop
	MOV	r14,#0			; terminate string
	STRB	r14,[r1]
	MOV	r0,#3		; input format = MMM_TYPE_DOT_EXTN
	ADD	r1,r12,#filetypebuffer	; r1 => terminated extension string
	MOV	r2,#0		; output format = MMM_TYPE_RISCOS
	SWI	X+MimeMap_Translate	; now r3 = filetype
	MOV	r1,r4		; restore filename length
	MOVVC	r0,r3		; if no error, use result
	FNpcreturn("VC")	; and return
._use_default
	FNmovc(0,filetype_default%)
	FNreturnClean
;------------------------

._found_comma
; handle ",xxx" extension
	; r0 => after comma
	; r2 = length of stuff after comma
	TEQ	r2,#3		; comma extension length is fixed
	BNE	_use_default
	; fetch next three characters
	LDRB	r14,[r0]
	LDRB	r2,[r0,#1]
	ORR	r14,r14,r2,LSL #8
	LDRB	r2,[r0,#2]
	ORR	r14,r14,r2,LSL #16
	MOV	r0,#16			; hex digits use base 16
	STR	r14,[r12,#filetypebuffer]	; store "xxx\0" string
	MOV	r2,#&f00		; prepare assembling maximum value
	ADD	r1,r12,#filetypebuffer	; pointer to string
	ORR	r0,r0,#1<<29		; number must be in range 0->r2
	ORR	r2,r2,#&ff		; finish assembling maximum value
	SWI	"XOS_ReadUnsigned"	; parse string
	MOVVS	r1,r4			; restore filename length
	BVS	_use_default		; if error, return default filetype
	SUB	r1,r4,#4		; otherwise, adjust filename length
	MOV	r0,r2			; and use result value
	FNpreturn			; is ok because V is clear


.File_CatalogueInfoFromInode
FNdt(">>> File_CatalogueInfoFromInode")
FNdt("  r0 (inode block ptr) = %0x8")
FNdt("  r1 (filetype) = %1x8")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read file catalogue information from the given inode number.
;------------------------
; On entry:
;	r0  =	pointer to inode block
;	r1  =	filetype
;	r6  =	pointer to MDB
; On exit:
;	r0  =	object type
;	r2  =	load address
;	r3  =	exec address
;	r4  =	object length
;	r5  =	object attributes
;------------------------
	FNfunction("r1,r9")
	MOV	r9,r1
	MOV	r1,r0
;------------------------
; Entries are of the form 'load,exec,length,attrs,type,name'.
	LDR	r14,[r1,#i_mode%]
	; Access rights are mapped as far as is sensible (Read access is always
	; granted). All the original UNIX mode bits are returned in the upper
	; half of the RISC OS attributes word (is okay because the upper 24 bits
	; are defined to be filing system dependent).
	MOV	r5,r14,LSL #16
;	TST	r5,#&01000000		; check for UNIX owner read bit
;	ORRNE	r5,r5,#&01		; set RISC OS owner read bit
	ORR	r5,r5,#&01	; FIXME - read access is always granted ;)
	TST	r5,#&00800000		; check for UNIX owner write bit
	ORRNE	r5,r5,#&02		; set RISC OS owner write bit
	TST	r5,#&00040000		; check for UNIX world read bit
	ORRNE	r5,r5,#&10		; set RISC OS world read bit
	TST	r5,#&00020000		; check for UNIX world write bit
	ORRNE	r5,r5,#&20		; set RISC OS world write bit
	; now checks all four type bits to recognize dirs.
	AND	r14,r14,#i_mode_typemask%
	TEQ	r14,#i_type_directory%
	MOVNE	r0,#1			; file
	MOVEQ	r0,#2			; directory

#if config_write%
;------------------------
; check whether I should use RiscOS load/exec stuff
	LDRB	r14,[r1,#i_loadexecflag%]
	TEQ	r14,#&35
	BEQ	_use_load_and_exec
;------------------------
#endif
	LDR	r3,[r1,#i_mtime%]	; time of last modification in seconds
					; from 1 Jan 1970
	MOV	r2,r3,LSR #24		; make arithmetic easier
	BIC	r3,r3,#&ff000000	; calculate time in cs since 1 Jan 1900
	LDR	r14,_exec_base_bottom
	ADD	r3, r3, r3, LSL #2	; r3 = r3 *  5
	ADD	r3, r3, r3, LSL #2	; r3 = r3 * 25
	ADD	r3, r14, r3, LSL #2	; r3 = r3 * 100 + r14
	LDR	r14,_exec_base_top
	ADD	r2, r2, r2, LSL #2	; r2 = r2 *  5
	ADD	r2, r2, r2, LSL #2	; r2 = r2 * 25
	ADD	r2, r14, r2, LSL #2	; r2 = r2 * 100 + r14
	LDR	r14,_load_base
	ADD	r2,r2,r3,LSR #24
	BIC	r3,r3,#&ff000000
	ORR	r3,r3,r2,LSL #24	; exec address is now complete
	ORR	r14,r14,r9,LSL #8	; add filetype
	ADD	r2,r14,r2,LSR #8	; load address is now complete
	LDR	r4,[r1,#i_size%]	; file length
FNdt("<<< File_CatalogueInfoFromInode")
FNdt("  r0 (object type) = %0i4")
FNdt("  r2 (load address) = %2x8")
FNdt("  r3 (exec address) = %3x8")
FNdt("  r4 (length) = %4i4")
FNdt("  r5 (attributes) = %5x8")
	FNreturnClean
#if config_write%
._use_load_and_exec
	LDR	r2,[r1,#i_loadaddr%]
	LDR	r3,[r1,#i_execaddr%]
	LDR	r4,[r1,#i_size%]	; file length
FNdt("<<< File_CatalogueInfoFromInode (naughty hack version)")
FNdt("  r0 (object type) = %0i4")
FNdt("  r2 (load address) = %2x8")
FNdt("  r3 (exec address) = %3x8")
FNdt("  r4 (length) = %4i4")
FNdt("  r5 (attributes) = %5x8")
	FNreturnClean
#endif
._load_base
	EQUD	&fff00033
._exec_base_bottom
	EQUD	&996a00			; low byte was &4c
._exec_base_top
	EQUD	&6e


#if config_write%

.File_WriteCatalogueInfo
FNdt(">>> File_WriteCatalogueInfo")
FNdt("  r1 (pathname) = %1z")
FNdt("  r2 (load address) = %2x8")
FNdt("  r3 (exec address) = %3x8")
FNdt("  r4 (length) = %4i4")
FNdt("  r5 (attributes) = %5x8")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Write file catalogue information the the given pathname.
;------------------------
; On entry:
;	r1  =	pointer to pathname
;	r2  =	load address
;	r3  =	exec address
;	r4  =	new attributes
;	r6  =	pointer to MDB
; On exit:
;	Nothing required
;------------------------
	FNfunction("")
	MOV	r0,r1
; check for "not found" condition
	BL	Cache_FindInode		; r0 = inode number (0 if not found)
	FNreturnOnErr			; any real error?
	TEQ	r0,#0			; check for "not found" condition
	FNpcreturn("EQ")		; is ok because V is clear
	BL	Cache_GetInodePointer
;------------------------
; for now, just write load and exec addresses
	MOV	r14,#&35		; special byte
	STRB	r14,[r0,#i_loadexecflag%]
	STRVC	r2,[r0,#i_loadaddr%]
	STRVC	r3,[r0,#i_execaddr%]
;------------------------
	BLVC	Cache_InodeModified
FNdtc(vc, "<<< File_WriteCatalogueInfo")
	FNreturnAsIs
#endif


.File_ReadCatalogueInfo
FNdt(">>> File_ReadCatalogueInfo")
FNdt("  r1 (pathname) = %1z")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read file catalogue information from the given pathname.
;------------------------
; On entry:
;	r1  =	pointer to pathname
;	r6  =	pointer to MDB
; On exit:
;	r0  =	object type
;	r2  =	load address
;	r3  =	exec address
;	r4  =	object length
;	r5  =	object attributes
;------------------------
	FNfunction("")
	MOV	r0,r1
; check for "not found" condition
	BL	Cache_FindInode		; r0 = inode number (0 if not found)
	FNreturnOnErr			; any real error?
	TEQ	r0,#0			; check for "not found" condition
	FNpcreturn("EQ")		; is ok because V is clear
	BL	Cache_GetInodePointer
	BLVC	File_CatalogueInfoFromInode
FNdt("<<< File_ReadCatalogueInfo")
FNdt("  r0 (object type) = %0i4")
FNdt("  r2 (load address) = %2x8")
FNdt("  r3 (exec address) = %3x8")
FNdt("  r4 (length) = %4i4")
FNdt("  r5 (attributes) = %5x8")
	FNreturnAsIs


.File_Open
FNdt(">>> File_Open")
FNdt("  r1 (filename) = %1z")
FNdt("  r3 (fileswitch handle) = %3x8")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Open file.
;------------------------
; On entry:
;	r1  =	pointer to filename
;	r3  =	FileSwitch handle for file
;	r6  =	pointer to MDB
; On exit:
;	r0  =	image file information word
;	r1  =	my handle for newly-opened file (0 if not found)
;	r2  =	buffer size for FileSwitch to use (max 1024)
;	r3  =	file extent
;	r4  =	space allocated to file (must be a multiple of buffer size)
;------------------------
	FNfunction("r5-r9")
	MOV	r0,r1
; extra checks for "object not found" condition
; Cache_FindInode no longer returns errors upon "object not found". So, add
; extra checking for that case (indicated by r0=0). By the way, FileSwitch
; says it doesn't let this happen at this point. Just making sure.
	BL	Cache_FindInode		; r0 = inode number (0 if not found)
	FNreturnOnErr
	TEQ	r0,#0
	MOVEQ	r1,#0			; if not found, return "not found"
	FNpcreturn("EQ")		; is ok because V is clear
	MOV	r7,r0			; I'll need the inode number later
	MOV	r9,r1			; store filetype
	BL	Cache_GetInodePointer
	MOVVS	r1,#0			; on cache miss, return "not found" (huh?)
	BVS	_cache_error		; added to make 32bit-safe
	LDR	r8,[r0,#i_mode%]	; now checks all four
	AND	r14,r8,#i_mode_typemask%	; type bits, not only some
	TEQ	r14,#i_type_regular%
	BNE	_not_regular_file
;------------------------
; get memory for file block and take a copy of the inode structure
	MOV	r3,#len_file%
	BL	Memory_Claim
	MOVVC	r1,r2
	MOVVC	r2,#len_inode%
	BLVC	Memory_BlockCopy
	FNreturnOnErr
;------------------------
; fill in the other information about the inode and link in
	STR	r9,[r1,#file_type%]
	STR	r7,[r1,#file_inode%]
	STR	r6,[r1,#file_mount%]
	LDR	r0,[r12,#firstfile]
	STR	r0,[r1,#file_next%]
	STR	r1,[r12,#firstfile]
	ADD	r3,r12,#firstfile
	STR	r3,[r1,#file_last%]
	TEQ	r0,#0
	STRNE	r1,[r0,#file_last%]
	MOV	r0,#1<<30		; read permitted, no write
	MOV	r2,#1024		; buffer size for FileSwitch to use
	LDR	r3,[r1,#i_size%]	; file extent
; fixed i_512bblocks% usage. i_512bblocks% contains the number of allocated
; blocks in traditional UNIX fashion - that is, in 512-byte blocks, regardless
; of the file system's logical block size.
; FIXME - might still make problems if the file has holes!
; new:
	LDR	r4,[r1,#i_512bblocks%]
	ADD	r4,r4,#1		; round to next even number
	BIC	r4,r4,#1		; (to have multiple of buffer size)
	CMP	r4,   #&00800000	; 4GB or more allocated?
	MVNCS	r4,   #&f0000001	; then build maximum value instead
	BICCS	r4,r4,#&0f800000
	;=MOVCS	r4,   #&007ffffe
	MOV	r4,r4,LSL #9		; convert 512byte count to byte count
; old:
;	LDR	r4,[r1,#i_blocks%]	; make space allocated to file
;	LDR	r14,[r6,#s_log_block_size%]
;	ADD	r14, r14, #9		; i_blocks% is number of blocks *2
;	MOV	r4, r4, LSL r14

FNdt("<<< File_Open")
FNdt("  r0 (image file info word) = %0x8")
FNdt("  r1 (my file handle) = %1x8")
FNdt("  r2 (buffer size for fileswitch) = %2i4")
FNdt("  r3 (file extent) = %3i4")
FNdt("  r4 (space allocated to file) = %4i4")
._cache_error
	FNreturnClean
;------------------------

; rewritten
._not_regular_file
	MOV	R0,R14
	FNunstackKeepR0
	TEQ	r0,#i_type_fifo%
	ADREQ	r0,_file_is_fifo
	BEQ	SetVFlagAndMovPcR14
	TEQ	r0,#i_type_chardev%
	ADREQ	r0,_file_is_chardev
	BEQ	SetVFlagAndMovPcR14
	TEQ	r0,#i_type_blkdev%
	ADREQ	r0,_file_is_blockdev
	BEQ	SetVFlagAndMovPcR14
	TEQ	r0,#i_type_symlink%
	ADREQ	r0,_file_is_symlink
	BEQ	SetVFlagAndMovPcR14
	TEQ	r0,#i_type_socket%
	ADREQ	r0,_file_is_socket
	ADDNE	r0,pc,#0
	B	SetVFlagAndMovPcR14
	EQUD	0
	EQUS	"This is not a normal file."+CHR$0:FNalign
._file_is_fifo
	EQUD	0
	EQUS	"UNIX pipes not supported."+CHR$0:FNalign
._file_is_chardev
	EQUD	0
	EQUS	"UNIX character devices not supported."+CHR$0:FNalign
._file_is_blockdev
	EQUD	0
	EQUS	"UNIX block devices not supported."+CHR$0:FNalign
._file_is_symlink
	EQUD	0
	EQUS	"Symbolic links are not yet supported."+CHR$0:FNalign
._file_is_socket
	EQUD	0
	EQUS	"UNIX sockets not supported."+CHR$0:FNalign


.File_Close
FNdt(">>> File_Close")
FNdt("  r1 (file handle) = %1x8")
FNdt("  r2 (new load addr) = %2x8")
FNdt("  r3 (new exec addr) = %3x8")
;------------------------
; Close an open file.
;------------------------
; On entry:
;	r1  =	my handle for the file
;	r2  =	new load address
;	r3  =	new exec address
; On exit:
;	ARP
;------------------------
	FNfunction("r0,r2,r3")
	LDR	r0,[r1,#file_last%]
	LDR	r14,[r1,#file_next%]
	STR	r14,[r0,#file_next%]
	TEQ	r14,#0
	STRNE	r0,[r14,#file_last%]
	MOV	r2,r1
	BL	Memory_Free
FNdt("<<< File_Close")
	FNreturnAsIs


.File_GetBytes
FNdt(">>> File_GetBytes")
FNdt("  r1 (file handle) = %1x8")
FNdt("  r2 (buffer ptr) = %2x8")
FNdt("  r3 (bytes to read) = %3x8")
FNdt("  r4 (file offset) = %4i4")
;------------------------
; Get bytes from an open file.
;------------------------
; On entry:
;	r1  =	my handle for the file
;	r2  =	pointer to buffer
;	r3  =	number of bytes to read into buffer
;	r4  =	file offset from which to get data
;------------------------
	FNfunction("r0-r8")
	LDR	r6,[r1,#file_mount%]	; get mount descriptor pointer
	MOV	r5,r1
;------------------------
; decide what block size the file has
	LDR	r0,[r6,#s_log_block_size%]
	MOV	r8,r2			; interleaved for SA-op
	ADD	r14,r0,#10
	MOV	r7,r4,LSR r14		; get block number
	BIC	r4,r4,r7,LSL r14	; get offset from block base
;------------------------
;	CMP	r0,#1
;	MOVLT	r7,r4,LSR #10		; divide by 1024 to get block number
;	MOVLT	r4,#0			; block-offset
;	MOVEQ	r7,r4,LSR #11
;	ANDEQ	r4,r4,#1<<10
;	MOVGT	r7,r4,LSR #12
;	ANDGT	r4,r4,#3<<10
;------------------------
; loop to get each block in turn and copy into given memory
;	r4  =	offset from first block to get
;	r7  =	block number of first block to get
._loop
	MOV	r0,r7
	ADD	r7,r7,#1
	MOV	r1,r5
	BL	Cache_BlockFromInode
	FNreturnOnErr
	ADD	r0,r0,r4		; add initial offset, then reset it to
	SUB	r2,r1,r0		; amount of block available
;P incorrect instruction removed from here - would have screwed up large-block
;P filesystems by using too little of a block.
	MOV	r4,#0			; ...zero
	MOV	r1,r8
	CMP	r3,r2			; do I want that many bytes?
	MOVLT	r2,r3			; no - get less
	BL	Memory_BlockCopy
	SUBS	r3,r3,r2		; and alter my pointer and bytes-to-get
	ADD	r8,r8,r2
	BGT	_loop			; loop back if I want more bytes
FNdt("<<< File_GetBytes")
	FNreturnClean
