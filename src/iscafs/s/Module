#multipass on
; Module
; ~~~~~~
; Miscellaneous module code (Init, final, service etc)
; 23 Mar 2004 - 32bitclean


.Module_ServiceTable
	equd	0			; flags word
	equd	Module_ServiceKnown	; code to process a known call
	equd	Service_FSReinit	; list of service calls
	equd	Service_IdentifyDisc
	equd	0			; zero terminator

	equd	Module_ServiceTable
.Module_Service
	mov	r0,r0				; magic word
	teq	r1,#Service_FSReinit		; &40
	teqne	r1,#Service_IdentifyDisc	; &69
	movne	pc,r14				; 32bit-safe
.Module_ServiceKnown
	teq	r1,#Service_IdentifyDisc
	ldr	r12,[r12]
	beq	Image_IdentifyDisc
	;b	FS_Declare
	;FALLTHROUGH

.FS_Declare
	FNfunction("r0-r3")
FNdt(">>> FS_Declare")
	mov	r0,#FSC_DeclareImageFS
	adr	r1,Module_Base
	mov	r2,#FS_Info
	mov	r3,r12
	swi	"XOS_FSControl"
	ldrvc	R0,[R12,#sysflags]
	orrvc	R0,R0,#sysflag_ifs_registered%
	strvc	R0,[R12,#sysflags]
FNdt("<<< FS_Declare")
	FNreturnAsIs


.Module_Initialise
	FNfunction("")
;------------------------
; init workspace and memory
; added IF config_dynamicareas% THEN ELSE ENDIF stuff
]
IF config_dynamicareas% THEN
	[OPT pass%
		MOV	r0,#0
		SWI	X+MAlloc_Vectors
		ADDVC	r3,r1,#len_workspace%
		MOVVC	r0,#6
		SWIVC	"XOS_Module"
		STRVC	r2,[r12]
		MOVVC	r12,r2
		ADDVC	r0,r2,#malloc_tabbase%
		SWIVC	X+MAlloc_Vectors
		FNreturnOnErr
	]
ELSE
	[OPT pass%
		MOV	R0,#6
		MOV	R3,#len_workspace%
		SWI	"XOS_Module"
		FNreturnOnErr
		STR	r2,[r12]
		MOV	r12,r2
	]
ENDIF
[OPT pass%
	MOV	r0,#0
	MOV	r1,#len_workspace%
._lp
	SUBS	r1,r1,#4
	STR	r0,[r12,r1]
	BGT	_lp
#if debug%
	stmfd	r13!,{r0-r2,r14}
	mov	r0,#&80
	adr	r1,DebugFilename%
	swi	"XOS_Find"
	movvs	r0,#0
	str	r0,[r12,#DebugHandle%]
	mov	r0,#0
	str	r0,[r12,#DebugIndent%]
	mov	r0,#1
	str	r0,[r12,#DebugFlags%]
	ldmfd	r13!,{r0-r2,r14}
#endif
FNdt(">>> Module_Initialise (debugging just started)")
	BL	Memory_Initialise
	FNreturnOnErr
;P Cache-line optimisation for memory block #1, which can use the 1024byte
;P optimised memory copy.
	FNmovc(3,len_blockbuffer%+len_inodebuffer%+32)
	BL	Memory_Claim
	FNreturnOnErr
	AND	r3,r2,#31
	RSB	r3,r3,#32
	ADD	r2,r2,r3
	STR	r2,[r12,#ptr_blockbuffer]	; this is cache-line aligned
	ADD	r2,r2,#len_blockbuffer%
	STR	r2,[r12,#ptr_inodebuffer]	; so is this, but is small
; new way of finding out FileCore limits
	ADR	r1,_discop64
	SWI	"XOS_SWINumberFromString"
	ADRVS	r1,_sectorop
	SWIVS	"XOS_SWINumberFromString"
	ADRVS	r1,_default
	LDMDB	r1,{r2,r3}
	ADD	r2,r1,r2			; convert relative to absolute address
	STR	r2,[r12,#read_part_fn]		; store function pointer
	STR	r3,[r12,#disc_size_limit]	; store max number of address bits
;------------------------
; init filing system and cache
	bl	FS_Declare
	blvc	Cache_Initialise
	FNreturnOnErr
;------------------------
; Initialise random number generator.
	eor	r0,r0,r1
	eor	r1,r0,r2,lsr #3
	swi	"OS_ReadMonotonicTime"
	eor	r0,r0,r1
	str	r0,[r12,#random_seed]
FNdt("<<< Module_Initialise")
	FNreturnClean

; deep magic starts here
	DCD	Image_ReadBytes_Partition29 - _default
	DCD	29
._default

	DCD	Image_ReadBytes_Partition38 - _sectorop
	DCD	38
._sectorop
	equs	"FileCore_SectorOp"+CHR$0
	FNalign

	DCD	Image_ReadBytes_Partition64 - _discop64
	DCD	64
._discop64
	equs	"FileCore_DiscOp64"+CHR$0


#if debug%
.DebugFilename%
	equs	config_dbg_file$+CHR$0
#endif

	FNalign


.Module_Finalise
	FNfunction("")
	LDR	r12,[r12]
FNdt(">>> Module_Finalise")
;------------------------
; remove filing system
	CMP	R0,R0				; clear V for FNreturnOnErr
	LDR	R0,[R12,#sysflags]
	TST	R0,#sysflag_ifs_registered%	; if ifs is registered,
	BICNE	R0,R0,#sysflag_ifs_registered%		; mark as unregistered
	STRNE	R0,[R12,#sysflags]
	MOVNE	r0,#FSC_RemoveImageFS			; and unregister
	MOVNE	r1,#filetype%
	SWINE	"XOS_FSControl"
	; this way, if unregistering gives an error, the module can still be
	; killed by just trying again.
	FNreturnOnErr
;------------------------
; remove memory and workspace
	BL	Memory_Finalise			; ignore errors?
FNdt("Closing debug filehandle")
FNdt("%f")
#if debug%
	stmfd	r13!,{r0-r2,r14}
	mov	r0,#0
	ldr	r1,[r12,#DebugHandle%]
	swi	"XOS_Find"
	ldmfd	r13!,{r0-r2,r14}
#endif
	MOV	r2,r12
	MOV	r0,#7
	SWI	"XOS_Module"
	FNreturnClean


.FS_Info
	EQUD	0		; FS information word
	EQUD	filetype%	; Image filing system file type
	EQUD	File_Open	- Module_Base
	EQUD	File_GetBytes	- Module_Base
	EQUD	0		; IE_PutBytes	- Module_Base
	EQUD	IE_Args		- Module_Base
	EQUD	File_Close	- Module_Base
	EQUD	IE_File		- Module_Base
	EQUD	IE_Func		- Module_Base


FNhereBeCode2setV		; error maker tail
