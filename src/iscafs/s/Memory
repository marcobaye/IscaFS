#multipass on
; Memory
; ~~~~~~
; Memory management code for dynamic areas or RMA.
; 23 Mar 2004: 32bitclean


]
IF config_dynamicareas% THEN
[OPT pass%
;=====================================================
; MEMORY MANAGEMENT CODE FOR USING MRG'S MEMORYALLOCATOR MODULE
;=====================================================


; Initialises the memory manager.
.Memory_Initialise
FNdt(">>> Memory_Initialise")
	FNfunction("r1-r4")
	ADR	r0,_name
	MOV	r1,#0			; malloc flags
	MOV	r3,#4096		; initial size of heap
	SWI	X+MAlloc_Initialise
	STRVC	r0,[r12,#heap]
FNdtc(vc, "<<< Memory_Initialise")
;	FNcreturn("VC")			commented out
;FNdt("<<! Memory_Initialise (error)")
	FNpreturn			; ok because R0 isn't stacked
._name
	EQUS	"IscaFS cache"+CHR$0:FNalign


.Memory_Finalise
FNdt(">>> Memory_Finalise")
	FNfunction("r0-r4")
	LDR	r1,[r12,#heap]
	SWI	X+MAlloc_Finalise
FNdt("<<< Memory_Finalise")
	FNpcreturn("VC")		; r0 stacked, so both needed
	FNreturnKeepR0andV


.Memory_Claim
	;; Note - MAlloc_Claim returns V set if it can't claim.
FNdt(">>> Memory_Claim")
FNdt("  r3 (size) = %3i4")
	FNfunction("r0,r1")
	LDR	r1,[r12,#heap]
	CMP	R0,R0			; clear V, maybe MAlloc_Claim doesn't
	MOV	r14,pc
	LDR	pc,[r12,#malloc_claim%]
FNdt("<<< Memory_Claim")
FNdt("  r2 (block) = %2x8")
	FNpcreturn("VC")		; r0 stacked, so both needed
	FNreturnKeepR0andV


.Memory_Resize
FNdt(">>> Memory_Resize")
FNdt("  r2 (block) = %2x8")
FNdt("  r3 (new size) = %3i4")
	FNfunction("r0,r1")
	ldr	r1,[r12,#heap]
	CMP	R0,R0			; clear V, maybe MAlloc_Resize doesn't
	mov	r14,pc
	ldr	pc,[r12,#malloc_resize%]
FNdt("<<< Memory_Resize")
FNdt("  r2 (block) = %2x8")
	FNpcreturn("VC")		; r0 stacked, so both needed
	FNreturnKeepR0andV


.Memory_ClaimZero
FNdt(">>> Memory_ClaimZero")
FNdt("  r3 (size) = %3i4")
	FNfunction("r0,r1,r3")
	add	r3,r3,#3	; This is an absolute requirement for zeroing.
	bic	r3,r3,#3
	LDR	r1,[r12,#heap]
	CMP	R0,R0		; clear V, maybe MAlloc_Claim doesn't
	MOV	r14,pc
	LDR	pc,[r12,#malloc_claim%]
FNdtc(vs, "<<! Memory_Claim (error)")
	BVS	_gerror		; added to make 32-bit-clean
	mov	r0,#0
._lp
	subs	r3,r3,#4
	str	r0,[r2,r3]
	bgt	_lp
FNdt("<<< Memory_Claim")
FNdt("  r2 (block) = %2x8")
	FNreturnClean

._gerror
	FNreturnKeepR0andV


.Memory_Free
FNdt(">>> Memory_Free")
FNdt("  r2 (block) = %2x8")
	FNfunction("r0-r2")
	CMP	R0,R0		; clear V, maybe MAlloc_Free doesn't
	TEQ	r2,#0
	LDRNE	r1,[r12,#heap]
	MOVNE	r14,pc
	LDRNE	pc,[r12,#malloc_free%]
FNdt("<<< Memory_Free")
	FNpcreturn("VC")	; r0 stacked, so both needed
	FNreturnKeepR0andV


.Memory_Shrink
FNdt(">>> Memory_Shrink")
	FNfunction("r0,r1")
	LDR	r1,[r12,#heap]
	SWI	X+MAlloc_Shrink
FNdt("<<< Memory_Shrink")
	FNpcreturn("VC")	; r0 stacked, so both needed
	FNreturnKeepR0andV


]
ELSE
[OPT pass%
;=====================================================
; MEMORY MANAGEMENT CODE FOR USING SMELLY RISCOS OS_HEAP MANAGER
;=====================================================


.Memory_Initialise
FNdt("Memory_Initialise")
	FNfunction("r0-r3")
	MOV	R0,#6
	MOV	R3,#4096
	SWI	"XOS_Module"	; added X bit and BVS
	BVS	_gerror
	MOV	R0,#0
	STR	R0,[R2]
	STR	R2,[R12,#heap]
	ADD	R1,R2,#4
	SUB	R3,R3,#8
	SWI	"XOS_Heap"	; added X bit
	FNpcreturn("VC")	; changed return to pcreturn
._gerror
	FNreturnKeepR0andV


.Memory_Finalise
FNdt("Memory_Finalise")
	FNfunction("r0-r3,r10")
	LDR	R2,[R12,#heap]
	MOV	R0,#7
._memory_destroy_loop
	LDR	R10,[R2]
	SWI	"OS_Module"	; FIXME - X bit?
	MOVS	R2,R10
	BNE	_memory_destroy_loop
	FNreturnClean


.Memory_Claim
FNdt("Memory_Claim")
	FNfunction("r0,r1,r3-r11")
	MOV	R0,#1
	LDR	R1,[R12,#heap]
	MOV	R8,R3
._memory_claim_loop
	LDR	R10,[R1],#4
	SWI	"OS_Heap"	; FIXME - add X bit!
	CMP	R2,R8
	BGT	_memory_claim_exit
	CMP	R10,#0
	MOVNE	R1,R10
	BNE	_memory_claim_loop
	MOV	R9,#4096-128
	MOV	R7,#1
._memory_claim_loop_to_get_size
	CMP	R9,R8
	ADDLT	R9,R9,#4096
	ADDLT	R7,R7,#1
	BLT	_memory_claim_loop_to_get_size
	MOV	R3,R7,LSL #12		;size of memory for heap
	SUB	R11,R1,#4
	MOV	R0,#6
	SWI	"OS_Module"	; FIXME - add X bit!
	STR	R2,[R11]
	MOV	R0,#0
	STR	R0,[R2],#4
	SUB	R3,R3,#4
	MOV	R1,R2
	SWI	"OS_Heap"	; FIXME - add X bit!
._memory_claim_exit
	MOV	R3,R8
	MOV	R0,#2
	SWI	"OS_Heap"	; FIXME - add X bit!
	FNreturnClean


.Memory_ClaimZero
FNdt("Memory_ClaimZero")
	FNfunction("r0,r1,r3")
	add	r3,r3,#3	; This is an absolute requirement for zeroing.
	bic	r3,r3,#3
	bl	Memory_Claim
	BVS	_gerror		; added to make 32-bit-clean
	mov	r0,#0
._lp
	subs	r3,r3,#4
	str	r0,[r2,r3]
	bgt	_lp
	FNreturnClean

._gerror
	FNreturnKeepR0andV


.Memory_Resize
FNdt("Memory_Resize")
	FNfunction("r0,r1")
	teq	r2,#0
	blne	Memory_Free
	blvc	Memory_Claim	; added VC condition
	FNpcreturn("VC")	; r0 stacked, so both needed
	FNreturnKeepR0andV


.Memory_Free
FNdt("Memory_Free")
	FNfunction("r0-r3,r10")
	LDR	R1,[R12,#heap]
	MOV	R0,#3
._memory_free_loop
	LDRB	R10,[R1],#4
	SWI	"XOS_Heap"
	BVC	_memory_free_exit
	MOVS	R1,R10
	BNE	_memory_free_loop

._memory_free_exit
	FNreturnClean


.Memory_Shrink
FNdt("Memory_Shrink")
	CMP	R0,R0		; clear V
	MOV	pc,r14		; changed MOVS to MOV
]
ENDIF
[OPT pass%


.Memory_BlockCopy
FNdt("=== Memory_BlockCopy")
	CMP	R0,R0		; clear V, maybe MAlloc_* doesn't
	LDR	pc,[r12,#malloc_blockcopy%]


.Memory_QuickCopy
FNdt(">>> Memory_QuickCopy")
FNdt("  r0 (source) = %0x8")
FNdt("  r1 (dest) = %1x8")
FNdt("  r2 (length) = %2x8")
;------------------------
; Copies memory REALLY QUICKLY using the MEMC cache-line storing optimisation.
; If an entire cache-line is STMed at once, no memory needs to be loaded into
; the cache from main memory before the STM takes place.  This is therefore
; a little faster.
;------------------------
; On entry:
;	r0  =	source block (MUST be word-aligned)
;	r1  =	dest block (should be 8-word aligned, MUST be word-aligned)
;	r2  =	length of block in bytes (assumed to be a multiple of 128 bytes)
; On exit:
;	ARP
;------------------------
	FNfunction("r0-r9")
._lp
	LDMIA	r0!,{r3-r9,r14}		; 32
	STMIA	r1!,{r3-r9,r14}
	LDMIA	r0!,{r3-r9,r14}		; 64
	STMIA	r1!,{r3-r9,r14}
	LDMIA	r0!,{r3-r9,r14}		; 96
	STMIA	r1!,{r3-r9,r14}
	LDMIA	r0!,{r3-r9,r14}		; 128
	SUBS	r2,r2,#128
	STMIA	r1!,{r3-r9,r14}
	BGT	_lp
FNdt("<<< Memory_QuickCopy")
	FNreturnClean


.Memory_ZeroBlock
FNdt(">>> Memory_ZeroBlock")
FNdt("  r1 (block) = %1x8")
FNdt("  r2 (length) = %2i4")
;------------------------
; Zeroes the given block REALLY QUICKLY using the MEMC cache-line storing
; optimisation.
;------------------------
; On entry:
;	r1  =	dest block (should be 8-words aligned, MUST be word-aligned)
;	r2  =	length of block in bytes (assumed to be a multiple of 4 bytes)
; On exit:
;	ARP
;------------------------
	FNfunction("r1-r9")
	ADR	r14,_zeroes
	LDMIA	r14,{r3-r9,r14}
	SUBS	r2,r2,#128
	BLT	_not_large
._lp
	STMIA	r1!,{r3-r9,r14}
	STMIA	r1!,{r3-r9,r14}
	SUBS	r2,r2,#128
	STMIA	r1!,{r3-r9,r14}
	STMIA	r1!,{r3-r9,r14}
	BGE	_lp
._not_large
	TST	r2,#64
	STMNEIA	r1!,{r3-r9,r14}
	STMNEIA	r1!,{r3-r9,r14}
	TST	r2,#32
	STMNEIA	r1!,{r3-r9,r14}
	TST	r2,#16
	STMNEIA	r1!,{r3-r6}
	TST	r2,#8
	STMNEIA	r1!,{r3,r4}
	TST	r2,#4
	STRNE	r3,[r1]
FNdt("<<< Memory_ZeroBlock")
	FNreturnClean

._zeroes
	EQUD	0
	EQUD	0
	EQUD	0
	EQUD	0
	EQUD	0
	EQUD	0
	EQUD	0
	EQUD	0
