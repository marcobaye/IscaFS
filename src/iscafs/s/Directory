#multipass on
; Directory
; ~~~~~~~~~
; Directory manipulation functions.
; 23 Mar 2004 - 32bitclean


.Directory_Scan
FNdt(">>> Directory_Scan")
FNdt("  r0 (inode number) = %0i4")
FNdt("  r1 (start offset) = %1i4")
FNdt("  r2 (user) = %2x8")
FNdt("  r3 (user) = %3x8")
FNdt("  r4 (user) = %4x8")
FNdt("  r5 (user) = %5x8")
FNdt("  r6 (MDB) = %6x8")
FNdt("  r11 (subroutine) = %11x8")
;------------------------
; Read entries from the given inode and call a function for each of them.
;------------------------
; On entry:
;	r0  =	inode number
;	r1  =	start offset
;	r2-r5 =	user registers
;	r6  =	pointer to MDB
;	r11 =	pointer to subroutine
; On exit:
;	r1  =	new start offset (-1 if last item reached)
;	r2-r5 may be corrupted by subroutine
;------------------------
; Entry/exit conditions for subroutine:
; On entry:
;	r0  =	pointer to dirent structure
;	r2-r5 =	user registers
;	r6  =	pointer to MDB
;	r8  =	number of the block within this directory
; On exit:
;	r0  =	-1 if manipulation failed (otherwise preserved)
; Notes:
;	If manipulation failed, Directory_Scan will return to its caller with
; the start offset updated to be the number of the item on which the subroutine
; returned a 'fail'.  Therefore directory contents reading routines which get
; to the end of their buffers can simply return fail when the buffer is too
; small for the given item, and the continue with the given start offset later.
;	Manipulation may also be flagged as having failed if the subroutine
; decides that adding the given item would exceed its maximum number of items
; count.  This maximum items count must be maintained by the subroutine.
;	Subroutines are not allowed to use blockbuffer or inodebuffer.
;------------------------
	FNfunction("r0-r1,r7-r10")	; BE CAREFUL - FNreturn not always used
; fixed empty dir access and improved register usage
	; r7 => inode struct
	; r8 = inode block number
	; r9 = start offset (from r1)
	; r10 = user reg (from r2)
	; Keep input values in safe registers
	MOV	r9,r1			; start offset
	MOV	r10,r2			; user reg
	; Fetch inode into inodebuffer
	BL	Cache_GetInodePointer	; r0 => inode struct
	FNreturnOnErr
	LDR	r1,[r12,#ptr_inodebuffer]
	MOV	r2,#len_inode%
	BL	Memory_BlockCopy	; copy inode into global inode buffer
	; Make sure inode is a directory
	LDR	r14,[r1,#i_mode%]	; now checks all four
	AND	r14,r14,#i_mode_typemask%	; type bits, not only
	TEQ	r14,#i_type_directory%		; single "dir" one
	BNE	_not_a_directory	; if different type
	; Prepare to scan
	MOV	r7,r1			; keep inode pointer in here
	MOV	r8,#0			; init inode block number
;------------------------
; main loop for getting items in the directory
._next_block
	; r7 => inode struct
	; r8 = current inode block number
	MOV	r0,r8			; get inode block number
	BL	Cache_BlockFromInode	; and fetch block
	FNreturnOnErr
; top-bit-set addresses are okay, except for -1
	CMN	r0,#1			; -1 means outside file (EOF)
	BEQ	_last_item_read
	SUB	r2,r1,r0		; r2 = size of block
	LDR	r1,[r12,#ptr_blockbuffer]; copy block to global block buffer
	BL	Memory_QuickCopy	; buffer is cache-line aligned ;-)
	TEQ	r8,#0			; was it the directory's first block?
	ADDEQ	r0,r1,#len_dirent%+4	; then skip ".", go straight to ".."...
	MOVNE	r0,r1
	ADD	r1,r1,r2
	BEQ	_next_entry		; ...and pretend it's empty
._same_block
	LDR	r14,[r0,#dirent_inode%]
	TEQ	r14,#0
	LDRNE	r14,[r0,#dirent_entry_length%]
	TSTNE	r14,#&ff0000		; null length leafname?
	BEQ	_next_entry
;------------------------
; now call the subroutine if I've got to the correct offset
	SUBS	r9,r9,#1		; reaches -1 at first item to be read
	BGE	_next_entry
	MOV	r2,r10			; restore user register
	MOV	r14,pc			; call subroutine
	MOV	pc,r11
	MOV	r10,r2			; keep it safe again
; top-bit-set values are okay, except for -1
	CMN	r0,#1
	BEQ	_subroutine_failed
._next_entry
	LDR	r14,[r0,#dirent_entry_length%]
; needed if FS uses "filetype-in-dir" feature
	MOVS	r14,r14,LSL#16	; get offset to next entry (shifted but clean)
	ADDNE	r0,r0,r14,LSR#16
	MOVEQ	r0,r1
	CMP	r0,r1			; reached the end of the block yet?
	BLT	_same_block
	MOV	r1,r7			; restore inode pointer
	ADD	r8,r8,#1		; increment block number
	B	_next_block

._not_a_directory
FNdt("_not_a_directory")
	FNreturnError("Not a directory.")

._last_item_read
FNdt("_last_item_read")
	LDMFD	r13!,{r0-r1}
	MVN	r1,#0			; -1 in r1 means no more entries
	MOV	r2,r10			; restore user register
	CMP	R0,R0			; clear V for 32bit-clean exit
	LDMFD	r13!,{r7-r10,pc}

._subroutine_failed
FNdt("_subroutine_failed")
	LDMFD	r13!,{r0-r1}
	SUB	r1,r1,r9		; calculate new start offset
	MOV	r2,r10			; restore user register
	CMP	R0,R0			; clears V
	SUB	r1,r1,#1
	LDMFD	r13!,{r7-r10,pc}	; removed '^'


.Directory_ReadEntries
FNdt(">>> Directory_ReadEntries")
FNdt("  r0 (14=just names 15=full info) = %0i4")
FNdt("  r1 (directory name) = %1z")
FNdt("  r2 (buffer to put data in) = %2x8")
FNdt("  r3 (number to read) = %3i4")
FNdt("  r4 (first item to read) = %4i4")
FNdt("  r5 (length of buffer) = %5i4")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read entries from the given directory into a given block of memory.
;------------------------
; On entry:
;	r0  =	14="just names" 15="full info"
;	r1  =	pointer to (wildcarded) directory name
;	r2  =	pointer to buffer into which to put data
;	r3  =	number of objects to read
;	r4  =	offset of first item to read in directory (0=first item)
;	r5  =	length of buffer
;	r6  =	pointer to MDB
; On exit:
;	r3  =	number of names read
;	r4  =	offset of next item to read in directory (-1 if end)
;------------------------
;MB - the following paragraph is no longer true:
;P Note - on entry, r0 is not what you'd expect for an ImageEntry_Func for
;P directory reading; the changed values are a result of MW's cunning IE_Func
;P optimisation.
;MB - I changed those values back when optimising some more. ;)
;------------------------
	FNfunction("")
	TEQ	r0,#14
	ADREQ	r11,Directory_ReadNames
	ADRNE	r11,Directory_ReadFullInfo
	MOV	r0,r1
; In this entry point, "object not found" is really an error.
; Because Cache_FindInode does no longer raise that error,
; it must be checked for here instead.
	BL	Cache_FindInode		; r0 = inode number (0 if not found)
	; check for real errors
	FNreturnOnErr
	TEQ	r0,#0			; check for "not found" condition
	BEQ	_not_found
	MOV	r1,r4
	MOV	r4,r3
	MOV	r3,#0			; init items counter
	BL	Directory_Scan
	MOVVC	r4,r1			; new start offset or -1
FNdt("<<< Directory_ReadEntries")
FNdt("  r3 (number read) = %3i4")
FNdt("  r4 (new offset) = %4i4")
	FNreturnAsIs

._not_found
	FNreturnError("Object not found.")


.Directory_ReadNames
FNdt(">>> Directory_ReadNames")
FNdt("  r0 (dirent ptr) = %0x8")
FNdt("  r2 (buffer to put data in) = %2x8")
FNdt("  r3 (items read so far) = %3i4")
FNdt("  r4 (number to read) = %4i4")
FNdt("  r5 (bytes left in buffer) = %5i4")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read the full info for the given file into the buffer
;------------------------
; On entry:
;	r0  =	pointer to dirent structure
;	r2  =	pointer to buffer into which to put data
;	r3  =	number of items read so far
;	r4  =	maximum number of items to read
;	r5  =	number of bytes left in buffer
;	r6  =	pointer to MDB
; On exit:
;	r0  =	-1 if max items read or buffer filled
;	r2  =	pointer to after added item
;	r3  =	updated number of items read
;	r5  =	updated number of bytes left in buffer
;------------------------
	FNfunction("r1,r4,r6")
;------------------------
; check for max items reached
	CMP	r3,r4
	MVNGE	r0,#0			; max items read
FNdtc(ge, "<<< Directory_ReadNames (max items read)")
	BGE	_clean_exit		; changed creturn to BGE
;------------------------
; check for buffer filledness
	LDR	r1,[r0,#dirent_entry_length%]
	MOV	r1,r1,LSR #16		; get text length
	AND	r1,r1,#255		; needed if FS uses "filetype-in-dir" feature
	ADD	r14,r1,#1
	CMP	r14,r5
	MVNGT	r0,#0			; no more space in buffer
FNdtc(gt, "<<< Directory_ReadNames (no space in buffer)")
	BGT	_clean_exit		; changed creturn to BGT
	SUB	r5,r5,r14
;------------------------
; read item into buffer and update buffer status
; REASON-DEPENDANT CODE STARTS HERE
	ADD	r4,r0,#len_dirent%
; added code to better deal with ",xxx" extensions
	SUBS	r14,r1,#4	; calculate theoretical offset of comma
	BLS	_loop		; if name's too short for ",xxx", skip this
	LDRB	r14,[r4,r14]	; get fourth-last character
	TEQ	r14,#ASC","	; if it's a comma,
	SUBEQ	r1,r1,#4	; pretend name is 4 chars shorter
	; FIXME - that is wrong, end is chopped off even if not hex number!
	; maybe call .File_FiletypeFromLeafname instead?
._loop
		LDRB	r14,[r4],#1	; FIXME - convert invalid chars!
		TEQ	r14,#ASC"."
		MOVEQ	r14,#ASC"/"
		TEQ	r14,#ASC" "
		MOVEQ	r14,#&a0	; ALT-Space
		STRB	r14,[r2],#1
		SUBS	r1,r1,#1
		BGT	_loop
	MOV	r14,#0
	STRB	r14,[r2],#1
; REASON-DEPENDANT CODE ENDS HERE
	ADD	r3,r3,#1
FNdt("<<< Directory_ReadNames")
._clean_exit
	FNreturnClean


.Directory_ReadFullInfo
FNdt(">>> Directory_ReadFullInfo")
FNdt("  r0 (dirent pointer) = %0x8")
FNdt("  r2 (buffer to put data in) = %2x8")
FNdt("  r3 (items read so far) = %3i4")
FNdt("  r4 (number to read) = %4i4")
FNdt("  r5 (bytes left in buffer) = %5i4")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read the given name into the buffer
;------------------------
; On entry:
;	r0  =	pointer to dirent structure
;	r2  =	pointer to buffer into which to put data
;	r3  =	number of items read so far
;	r4  =	maximum number of items to read
;	r5  =	number of bytes left in buffer
;	r6  =	pointer to MDB
; On exit:
;	r0  =	-1 if max items read or buffer filled
;	r2  =	pointer to after added item
;	r3  =	updated number of items read
;	r5  =	updated number of bytes left in buffer
;------------------------
	FNfunction("r1,r4,r7,r8")
;------------------------
; check for max items reached
	CMP	r3,r4
	MVNGE	r0,#0			; max items read
FNdtc(ge, "<<< Directory_ReadFullInfo (max items read)")
	BGE	_clean_exit		; changed creturn to BGE
;------------------------
; check for buffer filledness
	LDR	r1,[r0,#dirent_entry_length%]
	MOV	r1,r1,LSR #16		; get text length
	AND	r1,r1,#255		; needed if FS uses "filetype-in-dir" feature
	ADD	r14,r1,#4+4*5
	BIC	r14,r14,#3
	CMP	r14,r5
	MVNGT	r0,#0			; no more space in buffer
FNdtc(gt, "<<< Directory_ReadFullInfo (no space in buffer)")
	BGT	_clean_exit		; changed creturn to BGT
	SUB	r5,r5,r14
;------------------------
; read item into buffer and update buffer status
; REASON-DEPENDANT CODE STARTS HERE
	MOV	r7,r2
	STMFD	r13!,{r0,r3-r6,r8}
	MOV	r2,r0			; r2 => dirent structure
	ADD	r0,r0,#dirent_name%	; r0 => ext2 name
	BL	File_FiletypeFromLeafname; r0 = filetype, r1 = new length
	FNreturnOnErr
	MOV	r8,r1			; r8 = filename length without ",xxx"
	MOV	r1,r0			; r1 = filetype
	LDR	r0,[r2,#dirent_inode%]
	BL	Cache_GetInodePointer
	FNreturnOnErr
	; r0 => inode structure
	; r1 = filetype
	; r8 = filename length without ",xxx"
	BL	File_CatalogueInfoFromInode
	FNreturnOnErr
	; r0,r2-r5 = catalogue info
	STMIA	r7!,{r2-r5}
	STR	r0,[r7],#4
	MOV	r2,r7
	MOV	r1,r8			; r1 = filename length without ",xxx"
	LDMFD	r13!,{r0,r3-r6,r8}
	ADD	r4,r0,#len_dirent%	; r4 => ext2 filename
._loop
		LDRB	r14,[r4],#1	; FIXME - convert invalid chars!
		TEQ	r14,#ASC"."
		MOVEQ	r14,#ASC"/"
		TEQ	r14,#ASC" "
		MOVEQ	r14,#&a0	; ALT-Space
		STRB	r14,[r2],#1
		SUBS	r1,r1,#1
		BGT	_loop
	MOV	r14,#0
	STRB	r14,[r2],#1
	ADD	r2,r2,#3		; word align
	BIC	r2,r2,#3
; REASON-DEPENDANT CODE ENDS HERE
	ADD	r3,r3,#1
FNdt("<<< Directory_ReadFullInfo")
._clean_exit
	FNreturnClean
