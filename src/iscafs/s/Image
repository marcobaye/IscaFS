#multipass on
; Image
; ~~~~~
; Image mounting/umounting and low-level filesystem manipulation.
; 23 Mar 2004 - 32bitclean


.Image_Mount
FNdt(">>> Image_Mount")
FNdt("  r1 (fileswitch image file handle) = %1x8")
FNdt("  r2 (buffer size if known) = %2i4")
;------------------------
; Mount the given image.
;------------------------
; On entry:
;	r0  =	21
;	r1  =	FileSwitch handle of image file
;	r2  =	Buffer size for file if known, otherwise 0
; On exit:
;	r1  =	IscaFS handle for image file
;	AORP				; that's so not true... ;)
;------------------------
	FNfunction("r1")
;------------------------
; create block and link into chain
	MOV	r3,#len_mount%
	BL	Memory_Claim
	FNreturnOnErr
	MOV	r6,r2			; r6 now points at mnt_*
	STR	r2,[r13]		; return in r1
	STR	r1,[r6,#mnt_filehandle%]
;------------------------
; check to see if it's a pseudo-image
	MOV	r0, #3			; 3="read from given offset"
	; r1 = file handle
	ADD	r2, r6, #superblock%	; target buffer (only used temporarily)
	MOV	r3, #8			; read two words
	MOV	r4, #0			; from start of file
	SWI	"XOS_GBPB"
	BVS	_bad_image
	LDMDB	r2, {r0, r3}		; go back and fetch words into registers
	ADD	r2, r6, #superblock%	; (fix r2, remainder of fn expects it)
	LDR	r4,_special_words
	TEQ	r4,r0
	LDR	r4,_special_words+4
	TEQEQ	r4,r3
	BEQ	_pseudo_image		; init, read superblock, then jump to _check_image
; FIXME - all of this should be the other way around:
; first try to read the superblock (at offset 1024), and only if that fails,
; try to interpret the file as a pseudo image file (which is much smaller).
	FNladr(0, Image_ReadBytes_File)
	STR	r0,[r6,#mnt_readbytes%]
	FNladr(0, Image_WriteBytes_File)
	STR	r0,[r6,#mnt_writebytes%]
	MOV	r0, #mntflag_writeable%
	STR	r0, [r6, #mnt_flags%]
;------------------------
; load in enough of the superblock
	MOV	r0, #3			; 3="read from given offset"
	; r1 = file handle
	; r2 -> superblock buffer
	MOV	r3,#len_superblock%
	MOV	r4,#1024		; position of first superblock
	SWI	"XOS_GBPB"
	BVS	_bad_image
	TEQ	r3,#0
	BNE	_bad_image

._check_image
FNdt("_check_image")
;------------------------
; check if the magic word (ef53) is correct.
	ldr	r3, [r6, #s_magic%]	; s_state% is now in upper half
	mov	r0, #&ef000000		; build magic number
	orr	r0, r0, #&530000
	teq	r0, r3, lsl #16		; and check
	bne	_bad_image
; check state, refuse if not clean
	movs	r3, r3, lsr #17		; as ext4_state_clean% is 1, expect Z+C
	bcc	_not_clean
	bne	_unexpected_state_bits
; set default value for group descriptor size (might get changed further down)
	mov	r0, #32			; traditional group descriptor size
	strb	r0, [r6, #mnt_groupdesc_size%]
; check revision (only 0 and 1 are allowed)
	ldr	r3, [r6, #s_rev_level%]
	movs	r3, r3, lsr #1		; expect Z, check C
	bne	_unknown_revision
	movcc	r0, #7			; traditional inode size log2
	bcc	_set_inode_size_log2
; it's revision 1, so we can read additional fields
; check incompatible features:
		ldr	r0, [r6, #s_feature_incompat%]	; features the fs uses
		ldr	r2, _allowed_incompat_features	; features we support
		bics	r2, r0, r2
		bne	_incompatible
; check 64bit flag and set group descriptor size accordingly:
		tst	r0, #incompat_64bit
		beq	_check_inode_size
			ldr	r0, [r6, #s_def_hash_version%]	; upper half holds s_desc_size%!
			mov	r0, r0, lsr #16
			strb	r0, [r6, #mnt_groupdesc_size%]
			teq	r0, #32
			teqne	r0, #64
			bne	_unsupported_group_desc_size
			; TODO - check high word of "number of blocks" and complain if nonzero!
._check_inode_size
		ldr	r2, [r6, #s_inode_size%]	; inode size is in the lower 16 bits
		mov	r2, r2, lsl #16
		mov	r0, #7				; 7 for 128
		teq	r2, #&00800000			; 128?
		movne	r0, #8				; 8 for 256
		teqne	r2, #&01000000			; 256?
		bne	_unsupported_inode_size
._set_inode_size_log2
	strb	r0, [r6, #mnt_inode_size_log2%]	; remember inode size
	; use inode size and block size to calculate "inodes per block"
	ldr	r2, [r6, #s_blocksize_code%]
	add	r2, r2, #10
	sub	r0, r2, r0
	strb	r0, [r6, #mnt_inodes_per_block_log2%]
	; store block size
	mov	r0, #1
	mov	r0, r0, lsl r2
	str	r0, [r6, #mnt_block_size%]
;------------------------
; link in the new mount block
	LDR	r0,[r12,#firstmount]
	STR	r6,[r12,#firstmount]
	STR	r0,[r6,#next%]
	TEQ	r0,#0
	STRNE	r6,[r0,#last%]
	ADD	r3,r12,#firstmount
	STR	r3,[r6,#last%]
;------------------------
; ugly kluge to solve MDB problem (stale cache entries)
	LDR	r0,[r12,#last_volume_id]	; get last id
	ADD	r0,r0,#1			; increment
	STR	r0,[r12,#last_volume_id]	; store for next time
	STR	r0,[r6,#mnt_volume_id%]		; and assign to this new volume
;------------------------
; claim memory for all the inode table block numbers and load them from group descriptors
	LDR	r2,[r6,#s_blocks_count%]
	LDR	r3,[r6,#s_blocks_per_group%]
	BL	Divide			; r0 = r2/r3 ; r2 = r2%r3
	FNreturnOnErr
	; r3 = blocks per group
	; r0 = completely usable groups
	; r2 = remainder (if != 0, there's a last group of smaller size)
	TEQ	r2,#0			; is there a partially-filled group?
	ADDNE	r0,r0,#1		; then increment number of groups
	; r0 = group count		FIXME - store?
	mov	r9, r0			; r9 = "groups to do" countdown counter
	mov	r3, r0, lsl #2			; r3 = size needed for inode table block numbers
	bl	Memory_Claim			; r2 -> mem block of r3 bytes
	FNreturnOnErr
	str	r2, [r6, #mnt_inode_tables%]	; store pointer to lookup table
	mov	r7, r2				; r7 -> write position
; register usage below:
; r0 = block to load, ptr to block, word to copy
; r2 -> memory limit
; r3 -> word to read
; r4 = block size
; r5 = group descriptor size (32/64)
; r6 -> MDB
; r7 -> word to write
; r8 = block number of group descriptor table block
; r9 = countdown (words to copy)
	ldr	r4, [r6, #mnt_block_size%]
	ldrb	r5, [r6, #mnt_groupdesc_size%]
	ldr	r8, [r6, #s_first_data_block%]	; 1 for 1K blocks, 0 for all others
._load_group_descriptor_block
		add	r8, r8, #1		; r8 = next block of group descriptor table
		mov	r0, r8			; number of block to read
		bl	Cache_GetBlock		; r0 -> block
		FNreturnOnErr
		add	r3, r0, #bg_inode_table%	; r3 -> first word we want to read
		add	r2, r0, r4			; r2 -> mem limit (after block)
._copy_descriptor
		ldr	r0, [r3], r5
		str	r0, [r7], #4
		subs	r9, r9, #1
		beq	_done_with_copy
		cmp	r3, r2			; read ptr too far?
		bcc	_copy_descriptor
		bcs	_load_group_descriptor_block
._done_with_copy
FNdt("<<< Image_Mount")
FNdt("  r1 (my file handle) = %1x8")
	FNreturnClean


._special_words
	EQUD	&4cee68fe
	EQUD	&32747865	; "ext2"

._allowed_incompat_features
	equd	supported_incompat%

._error_return
	MOV	r2,r6
	BL	Memory_Free
	CMP	R0,#&80000000	; re-set V because BL might have cleared it
	CMNVC	R0,#&80000000
	FNreturnAsIs

._bad_image
FNdt("<<! Image_Mount (bad image)")
	MOV	r2,r6
	BL	Memory_Free
	FNreturnError("Not a valid ext2fs image.")

._no_such_device
FNdt("<<! Image_Mount (no such device)")
	MOV	r2,r6
	BL	Memory_Free
	FNreturnError("The device this partition lives on is not active.")

._not_clean
	MOV	r2,r6
	BL	Memory_Free
	FNreturnError("File system wasn't cleanly unmounted.")

._unexpected_state_bits
	MOV	r2,r6
	BL	Memory_Free
	FNreturnError("Unexpected state bits set in superblock.")

._unknown_revision
	MOV	r2,r6
	BL	Memory_Free
	FNreturnError("Unknown file system revision.")

._incompatible
	MOV	r2,r6
	BL	Memory_Free
	FNreturnError("File system uses incompatible features.")

._unsupported_group_desc_size
	MOV	r2,r6
	BL	Memory_Free
	FNreturnError("Group descriptor size is neither 32 nor 64.")

._unsupported_inode_size
	MOV	r2,r6
	BL	Memory_Free
	FNreturnError("Inode size is neither 128 nor 256.")

._filecore
	EQUS	"FileCore%"
._filesystem
	EQUS	"2341234123412341234123"+CHR$0

._pseudo_image
FNdt("_pseudo_image")
;------------------------
; sort out the read/write vectors
; uses ReadPartition 29/38/64 function pointer
	LDR	r0,[r12,#read_part_fn]		; load function ptr
	STR	r0,[r6,#mnt_readbytes%]
	FNladr(0, Image_WriteBytes_ReadOnly)	; partitions are ALWAYS ro
	STR	r0,[r6,#mnt_writebytes%]
;------------------------
; note that it's a partition and get the sector information
	MOV	r0,#mntflag_partition%
	STR	r0,[r6,#mnt_flags%]
	MOV	r0, #3				; 3="read from given offset"
	; r1 = file handle
	ADD	r2, r6, #mnt_startsector%	; start of "start/end/log2/drive" block
	MOV	r3, #16				; read four words
	MOV	r4, #8				; after the two magic words
	SWI	"XOS_GBPB"
;------------------------
; get the FileCore filing system and read its instance word
	MOVVC	r0, #3				; 3="read from given offset"
	; r1 = file handle
	ADRVC	r2, _filesystem
	MOVVC	r3, #22				; max bytes to read
	MOVVC	r4, #24				; string is located after six words
	SWIVC	"XOS_GBPB"
	FNreturnOnErr
	MOV	r0,#18
	ADR	r1,_filecore
	SWI	"XOS_Module"
	BVS	_no_such_device
	STR	r4,[r6,#mnt_instanceword%]
;------------------------
; get the FileCore descriptor block
	MOV	r3,#len_desc%		; has to be claimed from here since it
	MOV	r0,#6			; will be used shifted up
	SWI	"XOS_Module"
	STRVC	r2,[r6,#mnt_descriptor%]
	MOVVC	r1,r2
	ADDVC	r8,r6,#mnt_instanceword%
	LDRVC	r2,[r6,#mnt_drivenumber%]
	ADRVC	r0,_drive
	ADDVC	r2,r2,#ASC"0"		; NOTE - won't work on drives >9
	STRVCB	r2,[r0,#1]
	SWIVC	"XFileCore_DescribeDisc"
	BVS	_error_return
; FIXME - make sure image file and disc record agree on log2sectorsize!
; FIXME - if disc record says "1 sector per track and 1 heads total",
; use 63 sectors per track and 16 heads instead!
;------------------------
; alter the descriptor block so that it knows the disc is big enough
	LDR	r2,[r6,#mnt_endsector%]
	LDR	r0,[r6,#mnt_lbtsectorlen%]
	ADD	r2,r2,#1			; disc size is to the end of last sector
	RSB	r14,r0,#32			; 64bit disc size
	MOV	r14,r2,LSR r14			; high word of disc size in bytes
	MOV	r2,r2,LSL r0			; low word of disc size in bytes
	STR	r14,[r1,#desc_disc_size2%]	; 64bit disc size
	STR	r2,[r1,#desc_disc_size%]
; check whether partition can be fully accessed
	SUBS	r2,r2,#1			; calculate address of last byte
	SBC	r14,r14,#0			; fix high word
	TEQ	r14,#0
	MOVNE	r2,r14
	MOVNE	r14,#32
	; r14 = number of bits already counted
	; r2 = bits to count
	CMP	r2,#&00010000
	MOVCS	r2,r2,LSR #16
	ADDCS	r14,r14,#16
	CMP	r2,#&0100
	MOVCS	r2,r2,LSR #8
	ADDCS	r14,r14,#8
	TST	r2,#&f0
	MOVNE	r2,r2,LSR #4
	ADDNE	r14,r14,#4
	TST	r2,#&c
	MOVNE	r2,r2,LSR #2
	ADDNE	r14,r14,#2
	TST	r2,#&2
	MOVNE	r2,r2,LSR #1
	ADDNE	r14,r14,#1
	ADD	r14,r14,r2
	; r14 = number of bits needed to express disc address of last byte
	ldrb	r2,[r12,#disc_size_limit_log2]
	CMP	r2,r14
	BCC	_partition_is_unreadable
;------------------------
; read the super block
; now uses ReadPartition 29/38/64 function pointer
	ADD	r2,r6,#superblock%	; target buffer
	MOV	r3,#len_superblock%	; number of bytes to read
	MOV	r4,#1024		; partition offset to read
	MOV	r5,#0			; partition offset, high word
	MOV	r14,pc
	LDR	pc,[r6,#mnt_readbytes%]	; Image_ReadBytes_Partition 29/38/64
	BVC	_check_image
	B	_error_return

;------------------------
; Check if the old FileCore is physically able to read all of the partition.
; Thanks to Matthew Wilcox for suggesting this.
._partition_is_unreadable
FNdt("<<! Image_Mount (partition is unreadable)")
	MOV	r2,r1
	MOV	r0,#7
	SWI	"OS_Module"
	MOV	r2,r6
	BL	Memory_Free
	FNreturnError("This partition is not readable by your version of FileCore.")

._drive
	EQUS	":0"+CHR$0:FNalign


.Image_ReadBytes_File
FNdt(">>> Image_ReadBytes_File")
FNdt("  r2 (pointer to buffer) = %2x8")
FNdt("  r3 (bytes to read) = %3i4")
FNdt("  r4 (file offset (low)) = %4i4")
FNdt("  r5 (file offset (high)) = %5i4")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read bytes from the given image file
;------------------------
; On entry:
;	r2  =	pointer to buffer
;	r3  =	number of bytes to read
;	r4  =	file offset (low)
;	r5  =	file offset (high) - damn well should be zero
;	r6  =	pointer to mount descriptor block
; On exit:
;	r3  =	number of bytes not read
;------------------------
	FNfunction("r0-r2,r4")
	MOV	r0, #3				; 3="read from given offset"
	LDR	r1,[r6,#mnt_filehandle%]
	SWI	"XOS_GBPB"
FNdtc(vc, "<<< Image_ReadBytes_File")
	FNreturnAsIs


; split Image_ReadBytes_Partition into three separate functions.
; Image_ReadBytes_Partition29, FileCore_DiscOp, 29bit byte offset, 512 MB
; Image_ReadBytes_Partition38, FileCore_SectorOp, ~38bit byte offset, ~256 GB
; Image_ReadBytes_Partition64, FileCore_DiscOp64, 64bit byte offset, 16 ExbiByte

.Image_ReadBytes_Partition29
FNdt(">>> Image_ReadBytes_Partition29")
FNdt("  r2 (pointer to buffer) = %2x8")
FNdt("  r3 (bytes to read) = %3i4")
FNdt("  r4 (file offset (low))  = %4x8")
FNdt("  r5 (file offset (high)) = %5x8")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read bytes from the given partition, using XFileCore_DiscOp
;------------------------
; On entry:
;	r2  =	pointer to buffer
;	r3  =	number of bytes to read
;	r4  =	partition offset (low)
;	r5  =	partition offset (high) - damn well should be zero
;	r6  =	pointer to mount descriptor block
; On exit:
;	r3  =	number of bytes not read
;------------------------
	FNfunction("r0-r2,r4-r5,r7-r9")
	MOV	r9,r4
	MOV	r4,r3				; number of bytes to read
	MOV	r3,r2				; buffer to read data into
	LDR	r1,[r6,#mnt_descriptor%]	; alternate disc record
	LDR	r0,[r6,#mnt_lbtsectorlen%]
	ADD	r8,r6,#mnt_instanceword%	; point at instance word.
	MOV	r1,r1,LSL #6			; descriptor shifted up
	ORR	r1,r1,#1			; reason code 1 (read sectors)
	LDR	r7,[r6,#mnt_startsector%]	; first sector of partition
	ADD	r2,r9,r7,LSL r0			; r2 = byte offset into drive
	LDR	r7,[r6,#mnt_drivenumber%]	; get drive number
	LDR	r5,[r6,#mnt_endsector%]
	ORR	r2,r2,r7,LSL #29		; calculate disc address
	ADD	r7,r4,r2
	CMP	r7,r5,LSL r0
	FNcunstack("GT")
	BGT	Err_SectorOutOfRange
	SWI	"XFileCore_DiscOp"
	MOVVC	r3,r4
FNdtc(vc, "<<< Image_ReadBytes_Partition29")
	FNreturnAsIs

.Image_ReadBytes_Partition38
FNdt(">>> Image_ReadBytes_Partition38")
FNdt("  r2 (pointer to buffer) = %2x8")
FNdt("  r3 (bytes to read) = %3i4")
FNdt("  r4 (file offset (low))  = %4x8")
FNdt("  r5 (file offset (high)) = %5x8")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read bytes from the given partition, using XFileCore_SectorOp
;------------------------
; On entry:
;	r2  =	pointer to buffer
;	r3  =	number of bytes to read
;	r4  =	partition offset (low)
;	r5  =	partition offset (high)
;	r6  =	pointer to mount descriptor block
; On exit:
;	r3  =	number of bytes not read
;------------------------
	FNfunction("r0-r2,r4-r5,r7-r9")
	MOV	r9,r4
	MOV	r4,r3				; number of bytes to read
	MOV	r3,r2				; buffer to read data into
	LDR	r1,[r6,#mnt_descriptor%]	; alternate disc record
	LDR	r0,[r6,#mnt_lbtsectorlen%]
	ADD	r8,r6,#mnt_instanceword%	; point at instance word.
	MOV	r1,r1,LSL #6			; descriptor shifted up
	ORR	r1,r1,#1			; reason code 1 (read sectors)
	LDR	r7,[r6,#mnt_startsector%]	; first sector of partition
	ADD	r2,r7,r9,LSR r0			; r0 = mnt_lbtsectorlen%, from before
	; r2 = sector offset into drive (low word only)
	RSB	r14,r0,#32
	ADD	r2,r2,r5,LSL r14		; add high word of partition offset
	; r2 = sector offset into drive (both words taken into account)
	LDR	r7,[r6,#mnt_drivenumber%]	; get drive number
	LDR	r5,[r6,#mnt_endsector%]
	ORR	r2,r2,r7,LSL #29		; calculate disc address
	ADD	r7,r2,r4,LSR r0
	ADD	r5,r5,#1			; otherwise last sector is never read
	CMP	r7,r5
	FNcunstack("GT")
	BGT	Err_SectorOutOfRange
	SWI	X+FileCore_SectorOp
	MOVVC	r3,r4
FNdtc(vc, "<<< Image_ReadBytes_Partition38")
	FNreturnAsIs

.Err_SectorOutOfRange
FNdt("<<! Image_ReadBytes_Partition (sector out of range)")
	ADD	r0,pc,#0
	B	SetVFlagAndMovPcR14
	EQUD	0
	EQUS	"Sector out of range."+CHR$0:FNalign


.Image_ReadBytes_Partition64
FNdt(">>> Image_ReadBytes_Partition64")
FNdt("  r2 (pointer to buffer) = %2x8")
FNdt("  r3 (bytes to read) = %3i4")
FNdt("  r4 (file offset (low))  = %4x8")
FNdt("  r5 (file offset (high)) = %5x8")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read bytes from the given partition, using XFileCore_DiscOp64
;------------------------
; On entry:
;	r2  =	pointer to buffer
;	r3  =	number of bytes to read
;	r4  =	partition offset (low)
;	r5  =	partition offset (high)
;	r6  =	pointer to mount descriptor block
; On exit:
;	r3  =	number of bytes not read
;------------------------
	FNfunction("r0-r2,r4-r5,r7-r9")
	LDR	r7,[r6,#mnt_lbtsectorlen%]
	LDR	r8,[r6,#mnt_startsector%]	; first sector of partition
	RSB	r14,r7,#32
	LDR	r0,[r6,#mnt_endsector%]		; last sector of partition
	ADD	r0,r0,#1			; first forbidden one
	MOV	r9,r8,LSR r14			; r9 = high(byte offset of part start)
	MOV	r1,r0,LSR r14			; r1 = high(byte offset of part limit)
	MOV	r8,r8,LSL r7			; r8 = low(byte offset of part start)
	MOV	r0,r0,LSL r7			; r0 = low(byte offset of part limit)
	; r8/r9 = byte offset of partition start
	; r0/r1 = byte offset of partition limit (first sector *after*)
	ADDS	r8,r8,r4			; add partition start and partition
	ADC	r9,r9,r5			;   offset to create drive offset
	; r8/r9 = byte offset of desired location into drive
	; r0/r1 = byte offset of partition limit (first byte *after*)
	ADDS	r4,r8,r3			; find location of last byte to read
	ADC	r5,r9,#0			; fix high word
	; r8/r9 = byte offset of first byte to read
	; r4/r5 = byte offset of first byte *not* to read
	; r0/r1 = byte offset of first byte *forbidden* to read
	; make sure access is completely inside partition
	CMP	r1,r5				; compare high words
	CMPEQ	r0,r4				; if equal, compare low words
	FNcunstack("CC")
	BCC	Err_SectorOutOfRange
	LDR	r7,[r6,#mnt_drivenumber%]	; get drive number
	MOV	r4,r3				; number of bytes to read
	MOV	r3,r2				; buffer to read data into
	ADR	r2,_disc_addr_64
	STMIA	r2,{r7-r9}
	MOV	r1,#1				; reason code 1 (read sectors)
	LDR	r5,[r6,#mnt_descriptor%]	; alternate disc record
	ADD	r8,r6,#mnt_instanceword%	; point at instance word.
	SWI	X+FileCore_DiscOp64
	MOVVC	r3,r4
FNdtc(vc, "<<< Image_ReadBytes_Partition64")
	FNreturnAsIs

._disc_addr_64
	DCD	0	; drive number
	DCD	0	; byte address, low word
	DCD	0	; byte address, high word


.Image_WriteBytes_File
FNdt(">>> Image_WriteBytes_File")
FNdt("  r2 (pointer to buffer) = %2x8")
FNdt("  r3 (bytes to write) = %3i4")
FNdt("  r4 (file offset) = %4i4")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Write bytes to the given file
;------------------------
; On entry:
;	r2  =	pointer to buffer
;	r3  =	number of bytes to write
;	r4  =	file offset
;	r6  =	pointer to mount descriptor block
; On exit:
;	r3  =	number of bytes not written
;------------------------
	FNfunction("r0-r2,r4")
	MOV	r0, #1				;1="write to given offset"
	LDR	r1,[r6,#mnt_filehandle%]
	SWI	"XOS_GBPB"
FNdtc(vc, "<<< Image_WriteBytes_File")
	FNreturnAsIs


; commented out as it wasn't referenced
;.Image_WriteBytes_Partition
;FNdt(">>> Image_WriteBytes_Partition")
;FNdt("  r2 (pointer to buffer) = %2x8")
;FNdt("  r3 (bytes to write) = %3i4")
;FNdt("  r4 (partition offset) = %4i4")
;FNdt("  r6 (MDB) = %6x8")
;;------------------------
;; Write bytes to the given partition
;;------------------------
;; On entry:
;;	r2  =	pointer to buffer
;;	r3  =	number of bytes to write
;;	r4  =	partition offset
;;	r6  =	pointer to mount descriptor block
;; On exit:
;;------------------------
;FNdt("<<! Image_WriteBytes_Partition (we don't do this yet)")
;	ADD	r0,pc,#0		; added to make 32bit-safe
;	B	SetVFlagAndMovPcR14
;	EQUD	0
;	EQUS	"Partition writing is not yet implemented."+CHR$0:FNalign


.Image_WriteBytes_ReadOnly
FNdt("!!! Image_WriteBytes_ReadOnly (we can't write anything)")
	ADD	r0,pc,#0		; added to make 32bit-safe
	B	SetVFlagAndMovPcR14
	EQUD	0
	EQUS	"This partition/image is mounted read-only."+CHR$0:FNalign


.Image_IdentifyDisc
FNdt(">>> Image_IdentifyDisc")
;------------------------
; Check to see if the given disc is in ext2fs format.
;------------------------
; On entry:
;	r2  =	pointer to buffer
;	r3  =	length of buffer
;	r5  =	pointer to disc record
;	r6  =	sector cache handle
;	r8  =	pointer to FileCore instance private word to use
; On exit (if format identified):
;	r1  =	0 (to claim call)
;	r2  =	filetype number for given disc
;	r5  =	pointer to disc record, which has been modified
;	AORP
; On exit (if format not recognised):
;	r6  =	new sector cache handle
;	AORP
;------------------------
;	FNfunction("r0-r5,r7")
	FNfunction("r2-r4,r7")
;------------------------
; an ext2 floppy might have almost any shape.  Let's believe Filecore.
;------------------------
; try to recognise the disc from the special word in the first super block
	MOV	r1,#9+(1<<6)		; read sectors via cache, ignore esc
	ORR	r1,r1,r5,LSL #6
	MOV	r4,#s_magic%+4
	CMP	r3, #LEN(format_name$)+1
;XXXXXXXXXXXXXX
; finally activated MW's suggestion:
; new:
; MW thinks this should be:
	MOVLO	r7, #0
	MOVHS	r7, r2
; old:
;	MOVLE	r7, #0
;	MOVGT	r7, r2
; this doesn't do the same thing	(MB thinks MW is right)
;XXXXXXXXXXXXXX
	LDR	r2,[r5,#&c]		; disc address of root directory
	MOV	r4,#len_superblock%	; get 60 bytes of the super block
	MOV	r2,r2,LSL #28
	ADD	r2,r2,#1024		; disc address
	LDR	r3,[r12,#ptr_blockbuffer]
	SWI	"XFileCore_DiscOp"
	FNreturnOnErr
	LDR	r4,[r12,#ptr_blockbuffer]
	LDR	r2,[r4,#s_magic%-superblock%]
	MOV	r2, r2, LSL #16
	EOR	r2, r2, #&ef000000
	TEQ	r2, #&00530000
	MOVNE	r1,#&69
	FNpcreturn("NE")		; is ok because V is clear
;------------------------
; it is an ext2 disc - return the right info and update the disc shape
	LDR	r2,[r4,#s_blocksize_code% - superblock%]
	LDR	r1,[r4,#s_blocks_count%-superblock%]
	ADD	r2, r2, #10
	MOV	r1, r1, LSL r2		; FIXME - more than 4 GiB will overflow!
	STR	r1,[r5,#16]		; disc_size
;------------------------
; write disc name and cycle ID into FileCore descriptor block
	ADD	r4, r4, #s_volume_name%-superblock%
	LDMIA	r4, {r1-r3}		; get first 12 bytes of name
	MOV	r3, r3, LSL #16		; drop last 2 characters
	ORR	r3, r3, r2, LSR #16	; and put the two from r2 in
	MOV	r2, r2, LSL #16		; drop last 2 characters
	ORR	r2, r2, r1, LSR #16	; and put the two from r1 in
	MOV	r1, r1, LSL #16		; put the first two chars at the top
	LDR	r14, [r4, #-(s_volume_name%-s_wtime%)]	; get time of last write
	ADD	r4, r5, #20
	MOV	r14, r14, LSL #16	; put the lsb at the top..
	ORR	r1, r1, r14, LSR #16	; and then ORR it into the bottom.
	STMIA	r4, {r1-r3}		; set up the name & cycle ID
;------------------------
; write format name into supplied buffer
	TEQ	r7, #0
	BEQ	_no_space_for_formatname
	ADR	r2,_format_name
._lp
	LDRB	r3,[r2],#1
	TEQ	r3,#0
	STRB	r3,[r7],#1
	BNE	_lp
._no_space_for_formatname
	FNunstack
	MOV	r2,#filetype%
	MOV	r1,#0
	STR	r2,[r5,#32]		; filetype given to disc
FNdt("<<< Image_IdentifyDisc")
	MOV	pc,r14			; changed MOVS to MOV

._format_name
	EQUS	format_name$+CHR$0:FNalign


.Image_Umount
FNdt(">>> Image_Umount")
FNdt("  r1 (my handle for image) = %1x8")
;------------------------
; Unmount the given image.
;------------------------
; On entry:
;	r1  =	my handle for image
;------------------------
	FNfunction("")
	LDMIA	r1,{r0,r2}		; next, last
	TEQ	r0,#0
	STR	r0,[r2,#next%]
	STRNE	r2,[r0,#last%]
	MOV	r2,r1			; free memory
	ldr	r1, [r1, #mnt_inode_tables%]
	BL	Memory_Free
	MOV	r2,r1
	BL	Memory_Free
FNdt("<<< Image_Umount")
	FNreturnClean


.Image_ReadFreeSpace
FNdt(">>> Image_ReadFreeSpace")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read the free space and size of the given image.
;------------------------
; On entry:
;	r6  =	pointer to mount descriptor block
; On exit:
;	r0  =	free space
;	r1  =	biggest object creatable
;	r2  =	disc size
;------------------------
	FNfunction("")
;------------------------
; new code for returning free space
; The old code only worked reliably for partitions < 4GB, because just the
; lower 32 bits of the result were delivered. Then, calculations like
; USED = TOTAL - FREE could give negative results because of missing bits.
; The new code checks whether the 4GB limit is reached. If yes, "4GB - 1" is
; returned instead.
; Start by calling 64bit function. Then check high word of disc size.
; If !=0, use 0xffffffff (4GB - 1) as 32bit value.
	BL	Image_ReadFreeSpace64
	; r0 = free space, low
	; r1 = free space, high
	; r2 = biggest object creatable
	; r3 = disc size, low
	; r4 = disc size, high
	MOV	r0,r2	; 32bit free space = 32bit biggest object creatable
	TEQ	r4,#0	; check high word of disc size
	MOV	r1,r2	; move 32bit biggest object creatable into correct reg
	MOVEQ	r2,r3	; 32bit disc size = low word of 64bit disc size
	MVNNE	r2,#0	; if disc >= 4GB, limit to &ffffffff (4GB - 1)
	; r0 = free space, limited to 4GB - 1
	; r1 = biggest object creatable
	; r2 = disc size, limited to 4GB - 1
FNdt("<<< Image_ReadFreeSpace")
FNdt("  r0 (free space) = %0i4")
FNdt("  r1 (biggest possible object) = %1i4")
FNdt("  r2 (disc size) = %2i4")
	FNreturnClean


; new code for returning 64-bit free space
.Image_ReadFreeSpace64
FNdt(">>> Image_ReadFreeSpace64")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read the free space and size of the given image, using 64bit values.
;------------------------
; On entry:
;	r6  =	pointer to mount descriptor block
; On exit:
;	r0  =	free space, low
;	r1  =	free space, high
;	r2  =	biggest object creatable
;	r3  =	disc size, low
;	r4  =	disc size, high
;------------------------
	FNfunction("")
;------------------------
; get disc size
	LDR	r2,[r6,#s_blocksize_code%]
	LDR	r0,[r6,#s_free_blocks_count%]
	LDR	r3,[r6,#s_blocks_count%]
	ADD	r5,r2,#10
	RSB	r6,r2,#22
	MOVS	r1,r0,LSR r6	; shift free blocks down to get free space, hi
	MOV	r4,r3,LSR r6	; shift block count down to get total space, hi
	MOV	r0,r0,LSL r5	; shift free blocks up to get free space, lo
	MOV	r3,r3,LSL r5	; shift block count up to get total space, hi
	; biggest creatable object:
	; FileCore limits to 2GB. FileSwitch is said to cope with 4GB.
	; FIXME - limit to 0x7fffffff ?
	MOVEQ	r2,r0		; if free space < 4GB, just use that
	MVNNE	r2,#0		; if >= 4GB, limit to &ffffffff (4GB - 1)
FNdt("<<< Image_ReadFreeSpace64")
	FNreturnClean


.Image_ReadUsedSpaceMap
FNdt(">>> Image_ReadUsedSpaceMap")
FNdt("  r2 (buffer for map) = %2x8")
FNdt("  r5 (size of buffer) = %5i4")
FNdt("  r6 (MDB) = %6x8")
;------------------------
; Read the used space bitmap of the given image (we don't do this yet).
;------------------------
; On entry:
;	r2  =	pointer to buffer for map (filled with 0s)
;	r5  =	size of buffer
;	r6  =	pointer to mount descriptor block
; On exit:
;	r0-r2, r5, r6 preserved
;------------------------
	B	IE_Error_Unsupported


; new code for reading boot option
.Image_ReadBootOption
;------------------------
; Read boot option. Dummy function, needed for *cat and *ex to work.
;------------------------
; On entry:
;	r6  =	pointer to mount descriptor block
; On exit:
;	r0, r1, r6 preserved!
;	r2  =	boot option
;------------------------
	MOV	R2, #0;	"no boot action"
	CMP	R0,R0			; clears V
	MOV	PC,R14
