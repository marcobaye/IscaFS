#multipass on
; Args
; ~~~~
; Open file manipulation functions.
; 23 Mar 2004 - 32bitclean


.Args_ReadAllocatedSize
FNdt(">>> Args_ReadAllocatedSize")
FNdt("  r1 (my handle for file) = %1h8")
;------------------------
; Read the size allocated to the file
;------------------------
; On entry:
;	r1  =	my handle for file
; On exit:
;	r2  =	size allocated to file
;------------------------
	FNfunction("")
; fixed i_512bblocks% usage. i_512bblocks% contains the number of allocated
; blocks in traditional UNIX fashion - that is, in 512-byte blocks, regardless
; of the file system's logical block size.
; FIXME - might still make problems if the file has holes!
; FIXME - check largefile/hugefile flags
	LDR	r2,[r1,#i_512bblocks%]
	ADD	r2,r2,#1		; round to next even number
	BIC	r2,r2,#1		; (to have multiple of buffer size)
	CMP	r2,   #&00800000	; 4GB or more allocated?
	MVNCS	r2,   #&f0000001	; then build maximum value instead
	BICCS	r2,r2,#&0f800000
	;=MOVCS	r2,   #&007ffffe
	MOV	r2,r2,LSL #9		; convert 512byte count to byte count
FNdt("<<< Args_ReadAllocatedSize")
FNdt("  r2 (size allocated to file) = %2i4")
	FNreturnClean


.Args_ReadDateStamp
FNdt(">>> Args_ReadDateStamp")
FNdt("  r1 (my handle for file) = %1h8")
;------------------------
; Read the datestamp (load and exec addresses) for the file.
;------------------------
; On entry:
;	r1  =	my handle for file
; On exit:
;	r2  =	load address of file
;	r3  =	exec address of file
;------------------------
	FNfunction("")
	mov	r0,r1
	ldr	r6,[r1,#file_mount%]
	ldr	r1,[r1,#file_type%]
	bl	File_CatalogueInfoFromInode	; never fails
FNdt("<<< Args_ReadDataStamp")
FNdt("  r2 (load address) = %2h8")
FNdt("  r3 (exec address) = %3h8")
	FNreturnClean
