REM File containing internal workspace definitions



REM Main workspace - zeroed at module initialisation
PROCwksp_init
heap		= FNwksp_int
blocktableA	= FNwksp_int
blocktableB	= FNwksp_int
random_seed	= FNwksp_int
firstmount	= FNwksp_int:REM FIXME - check whether used correctly
firstfile	= FNwksp_int
ptr_blockbuffer	= FNwksp_int
ptr_inodebuffer	= FNwksp_int
read_part_fn	= FNwksp_int:REM ReadPartition function ptr (29/38/64 bits)
disc_size_limit_log2	= FNwksp_byte:REM 29, 38 or 64
b_ifs_registered%	= FNwksp_byte:REM byte flag, if set, de-register IFS on exit (needed to keep from deregistering twice)
wordpadding1		= FNwksp_short
filetypebuffer	= FNwksp_add(1,12):REM needed for conversions
	len_filetypebuf	= 11:REM maximum length of ".ext" extension
last_volume_id	= FNwksp_int:REM incremented on each mount so old cache entries do not match
IF debug% THEN
	DebugHandle%	= FNwksp_int
	DebugIndent%	= FNwksp_int
	DebugFlags%	= FNwksp_int
ENDIF
len_workspace%	= FNwksp_length

REM The MAlloc vectors are added after the main workspace is stored, so
REM len_workspace% is NOT the real length which will be allocated to the
REM workspace.
IF config_dynamicareas% THEN
	malloc_tabbase%		= FNwksp_length
	malloc_claim%		= FNwksp_int
	malloc_free%		= FNwksp_int
	malloc_resize%		= FNwksp_int
	malloc_getblocksize%	= FNwksp_int
	malloc_enumerateblocks%	= FNwksp_int
	malloc_blockcopy%	= FNwksp_int
	malloc_shiftblock%	= FNwksp_int
ENDIF


len_blockbuffer%	= 4096	:REM maximum size of a block



REM Cache control block (CAUTION, do not change struct, first two words are loaded via LDMIA!)
PROCwksp_init
cachectrl_pointer%	= FNwksp_int	:REM must stay first word
cachectrl_numentries%	= FNwksp_int	:REM must stay second word
len_cachectrl%		= FNwksp_length
shift_cachectrl%	= 3



REM Cache entry block
PROCwksp_init
cacheent_pointer%	= FNwksp_int	:REM 0 if no block claimed for it.
cacheent_vol_id%	= FNwksp_int	:REM 0 if the cache entry is invalid. (used to be called "cacheent_mount%")
cacheent_blocknum%	= FNwksp_int
cacheent_flags%		= FNwksp_int
	REM Flags for cacheent_flags% in cache entry for a single block
	fcacheent_sizemask%	= 3	:REM log-2 block size in kilobytes.	FIXME - use &f!
	REMfcacheent_dirty%	= &10
len_cacheent%		= FNwksp_length
shift_cacheent%		= 4



REM Mount descriptor structure
PROCwksp_init
next%			= FNwksp_int
last%			= FNwksp_int
mnt_flags%		= FNwksp_int
mnt_filehandle%		= FNwksp_int
REM the next four words are read as a block from the pseudo image file:
	mnt_startsector%	= FNwksp_int
	mnt_endsector%		= FNwksp_int
	mnt_lbtsectorlen%	= FNwksp_int	:REM log2 of sector length
	mnt_drivenumber%	= FNwksp_int
	REM log2 and drivenum are basically byte values; if all accesses are
	REM modified accordingly, the higher bits could be repurposed for
	REM flag bits (like "no FileCore boot block so fake DiscRecord")
mnt_instanceword%	= FNwksp_int
mnt_descriptor%		= FNwksp_int
mnt_readbytes%		= FNwksp_int	:REM Read_File/Partition29/Partition38/Partition64
mnt_writebytes%		= FNwksp_int	:REM Write_File/Error_ReadOnly
mnt_block_size%		= FNwksp_int	:REM 1024/2048/4096
REM mnt_inodeblockaddr%	= FNwksp_int	:REM used for write support
REM mnt_inodetabaddr%	= FNwksp_int	:REM used for write support
REM mnt_numgroups%	= FNwksp_int	:REM used for write support
mnt_inode_tables%	= FNwksp_int	:REM one block number for each group
mnt_volume_id%		= FNwksp_int	:REM ensures old cache entries do not match
mnt_inode_size_log2%	= FNwksp_byte	:REM 7 for 128, 8 for 256
mnt_inodes_per_block_log2%	= FNwksp_byte	:REM 2/3/4/5 (3/4/5 for 128, 2/3/4 for 256)
mnt_groupdesc_size%	= FNwksp_byte	:REM 32/64
mnt_padding_byte	= FNwksp_byte

REM superblock structure (inside mount descriptor structure)
REM FIXME - do not include a large chunk of the superblock in the MDB, just
REM copy the fields we need!
superblock%		= FNwksp_length
s_inodes_count%		= FNwksp_int
s_blocks_count%		= FNwksp_int
s_reserved_blocks_count%= FNwksp_int:REM for super-user
s_free_blocks_count%	= FNwksp_int
s_free_inodes_count%	= FNwksp_int
s_first_data_block%	= FNwksp_int:REM 1 for 1K block size, 0 for all others
s_blocksize_code%	= FNwksp_int:REM 0/1/2 for 1K/2K/4K (i.e. add 10 to get log2 - FIXME - maybe "cache" that value?)
s_log_frag_size%	= FNwksp_int:REM in ext4 now log_cluster_size (bigalloc feature)
s_blocks_per_group%	= FNwksp_int:REM 8K/16K/32K for 1K/2K/4K block size
s_frags_per_group%	= FNwksp_int:REM in ext4 now clusters_per_group (bigalloc feature)
s_inodes_per_group%	= FNwksp_int
s_mtime%		= FNwksp_int:REM mount time
s_wtime%		= FNwksp_int:REM write time
s_mnt_count%		= FNwksp_short:REM mounts since last fsck
s_max_mnt_count%	= FNwksp_short:REM when fsck is forced
s_magic%		= FNwksp_short:REM must be 0xef53
s_state%		= FNwksp_short
	ext4_state_clean%	= &0001:REM cleanly umounted
	REM state_errors	= &0002:REM errors detected
	REM state_orphans	= &0004:REM orphans being recovered
s_errors%		= FNwksp_short:REM do what? continue, remount readonly, panic?
s_minor_rev_level%	= FNwksp_short
s_lastcheck%		= FNwksp_int:REM date of last fsck
s_checkinterval%	= FNwksp_int:REM max time between fsck
s_creator_os%		= FNwksp_int
s_rev_level%		= FNwksp_int:REM 0 or 1, see below
s_def_resuid%		= FNwksp_short:REM default uid for reserved blocks
s_def_resgid%		= FNwksp_short:REM default gid for reserved blocks
REM rev level 0 stops here, rev level 1 goes on:
s_first_ino%		= FNwksp_int:REM first non-reserved inode
s_inode_size%		= FNwksp_short:REM default was 128, ext4 changed to 256
s_block_group_nr%	= FNwksp_short:REM where this superblock is
s_feature_compat%	= FNwksp_int:REM compatible features
s_feature_incompat%	= FNwksp_int:REM incompatible features
	REM incompat_compression	=     &1
	REM incompat_filetype		=     &2
	REM incompat_recover		=     &4:REM journal must be replayed
	REM incompat_journal_dev	=     &8
	REM incompat_meta_bg		=    &10:REM set on-the-fly if online resize needs space
	REM incompat_extents		=    &40
	incompat_64bit			=    &80
	REM incompat_mmp		=   &100
	REM incompat_flex_bg		=   &200:REM block group metadata can be put anywhere
	REM incompat_ea_inode		=   &400
	REM incompat_dirdata		=  &1000
	REM incompat_csum_seed		=  &2000
	REM incompat_largedir		=  &4000
	REM incompat_inline_data	=  &8000:REM should be easy to support, but never used?!
	REM incompat_encrypt		= &10000
	REM incompat_casefold		= &20000
	supported_incompat%		=   &2c2
s_feature_ro_compat%	= FNwksp_int:REM readonly-compatible features
s_uuid%			= FNwksp_add(4,4)
s_volume_name%		= FNwksp_add(1,16)
REM not really needed, start
	s_last_mounted%		= FNwksp_add(1,64)
	s_algorithm_usage_bitmap= FNwksp_int
	s_prealloc_blocks	= FNwksp_byte
	s_prealloc_dir_blocks	= FNwksp_byte
	s_reserved_gdt_blocks	= FNwksp_short
	s_journal_uuid		= FNwksp_add(1,16)
	s_journal_inum		= FNwksp_int
	s_journal_dev		= FNwksp_int
	s_last_orphan		= FNwksp_int
	s_hash_seed		= FNwksp_add(4,4)
	s_def_hash_version%	= FNwksp_byte	:REM used to read s_desc_size% because of alignment!
	s_jnl_backup_type	= FNwksp_byte
REM end
s_desc_size%		= FNwksp_short:REM block group descriptor size if fs has the 64bit feature flag set
REM end of superblock structure (actually it goes on, but we don't care)
REM Note: len_superblock% is not the actual length of a superblock, but the
REM length of it that should be read into the block.
len_superblock%		= FNwksp_length - superblock%
len_mount%		= FNwksp_length



REM FileCore descriptor block
PROCwksp_init
desc_log2secsize%	= FNwksp_byte
desc_secspertrack%	= FNwksp_byte
desc_heads%		= FNwksp_byte
desc_density%		= FNwksp_byte
desc_idlen%		= FNwksp_byte
desc_log2bpmp%		= FNwksp_byte
desc_skew%		= FNwksp_byte
desc_bootoption%	= FNwksp_byte
desc_lowsector%		= FNwksp_byte
desc_nzones%		= FNwksp_byte
desc_zone_spare%	= FNwksp_short
desc_root%		= FNwksp_int
desc_disc_size%		= FNwksp_int
desc_disc_id%		= FNwksp_short
desc_disc_name%		= FNwksp_add(1,10)
desc_disctype%		= FNwksp_int
REM following fields are used in RiscOS 3.6 and later
desc_disc_size2%	= FNwksp_int
desc_share_size%	= FNwksp_byte
desc_big_flag%		= FNwksp_byte
REM following fields are used in RISC OS 4 and later
desc_nzones_high%	= FNwksp_byte
desc_unknown%		= FNwksp_byte
desc_format_version%	= FNwksp_int
desc_root_size%		= FNwksp_int
desc_reserved%		= FNwksp_current
REM a disc record takes up 60 bytes on disc, but FileCore_DescribeDisc returns 64 bytes.
len_desc%		= 64	:REM ...so this makes sure our buffer is large enough.


REM image flags
mntflag_partition%	= 1
mntflag_writeable%	= 1<<1
mntflag_synchronous%	= 1<<2		:REM synchronous writes are wanted


REM directory entry structure
PROCwksp_init
dirent_inode%		= FNwksp_int
dirent_entry_length%	= FNwksp_short	:REM always loaded as a word,
dirent_name_length%	= FNwksp_short	:REM so you won't find "_name_"
dirent_name%		= FNwksp_current

len_dirent%		= FNwksp_length	:REM Note - only base length



REM inode structure
PROCwksp_init
i_mode%			= FNwksp_short:REM lower 12 bits are access rights,
	REM upper 4 bits are file type:
	i_mode_typemask%	= &f000
	i_type_fifo%		= &1000
	i_type_chardev%		= &2000
	i_type_directory%	= &4000	:REM plain old directory
	i_type_blkdev%		= &6000
	i_type_regular%		= &8000	:REM plain old file
	i_type_symlink%		= &a000
	i_type_socket%		= &c000
i_uid%			= FNwksp_short:REM lower 16 bits of owner user id
i_size%			= FNwksp_int:REM lower 32 bits of file size
i_atime%		= FNwksp_int:REM last access time
i_ctime%		= FNwksp_int:REM last inode change time
i_mtime%		= FNwksp_int:REM last file modification time
i_dtime%		= FNwksp_int:REM file deletion time
i_gid%			= FNwksp_short:REM lower 16 bits of group id
i_links_count%		= FNwksp_short:REM hard links
i_512bblocks%		= FNwksp_int:REM block count (lower 32 bits if fs uses huge_file feature)
i_flags%		= FNwksp_int:REM inode flags, see "man lsattr" or "man chattr" ;)
	ext4_huge_file_flag%	=    &40000:REM block count uses fs blocks instead of unix blocks
	ext4_extents_flag%	=    &80000:REM inode uses extents instead of block pointers
	ext4_inline_data_flag%	= &10000000:REM flag is assigned, but has never been implemented?
	REM all other flags seem to be of no consequence to IscaFS...
i_reserved1%		= FNwksp_int:REM depends on creator os (FIXME - what does Linux do?)
i_block%		= FNwksp_add(4,15):REM pointers to blocks (or extent node if using extents)
i_version%		= FNwksp_int:REM for NFS
i_file_acl%		= FNwksp_int:REM lower 32 bits of extended attribute block
i_dir_acl%		= FNwksp_int:REM upper 32 bits of file size
i_faddr%		= FNwksp_int:REM obsolete (like all other "fragment" stuff)
REM next 12 bytes depend on creator os,
REM linux uses "upper 16 bits of block count, of ext attr block, of uid, of gid", "lower 16 bits of checksum", "16 bits unused"
i_reserved2_0%		= FNwksp_int	:REM i_loadexecflag%
i_reserved2_1%		= FNwksp_int	:REM i_loadaddr%
i_reserved2_2%		= FNwksp_int	:REM i_execaddr%
REM this concludes the old 128-byte inodes. today's larger inodes have:
REM size after first 128 bytes	= FNwksp_short:REM field includes itself
REM checksum_hi			= FNwksp_short
REM ctime_extra			= FNwksp_int:REM lower 2 bits are epoch, upper 30 bits are nanoseconds
REM mtime_extra			= FNwksp_int:REM lower 2 bits are epoch, upper 30 bits are nanoseconds
REM atime_extra			= FNwksp_int:REM lower 2 bits are epoch, upper 30 bits are nanoseconds
REM crtime			= FNwksp_int:REM creation time
REM crtime_extra		= FNwksp_int:REM lower 2 bits are epoch, upper 30 bits are nanoseconds
REM ...so these fields solve the year 2038 problem and give subsecond precision,
REM but for now we ignore them.
REM version_hi			= FNwksp_int
REM project_id			= FNwksp_int

len_inode%		= FNwksp_length

REM Open file descriptor block
REM Note - everything before file_next% is the inode block.  Inode number
REM (file_inode%) is kept for future write-ability to enable inode information
REM to be written back to the filesystem.
file_next%		= FNwksp_int
file_last%		= FNwksp_int
file_inode%		= FNwksp_int
file_type%		= FNwksp_int
file_mount%		= FNwksp_int

len_file%		= FNwksp_length



REM group descriptor structure
REM FIXME - if the fs has the 64bit feature flag set, the size of this struct
REM grows from 32 to _at_least_ 64! size is then stored in superblock.
PROCwksp_init
bg_block_bitmap%	= FNwksp_int
bg_inode_bitmap%	= FNwksp_int
bg_inode_table%		= FNwksp_int	:REM FIXME - until write support comes along, this field is all we need!
bg_free_blocks_count%	= FNwksp_short
bg_free_inodes_count%	= FNwksp_short
bg_used_dirs_count%	= FNwksp_short
bg_pad%			= FNwksp_short
bg_reserved1%		= FNwksp_int
bg_reserved2%		= FNwksp_int
bg_reserved3%		= FNwksp_int

len_groupdesc%		= FNwksp_length
REM ensure length is really 32,
REM so a simple shift can be used for converting name to offset
IF len_groupdesc% <> 32 THEN PRINT "Group descriptor struct has wrong length!":ERROR 0,"Group descriptor struct has wrong length!"

shift_groupdesc%	= 5
